local a = loadstring(game:GetObjects("rbxassetid://18520035557")[1].Source)()
a.UnloadCallback = function()
    getgenv().EightBall = nil
end
local b = game:GetService("Players")
local c = game:GetService("StarterGui")
local d = game:GetService("TweenService")
local e = game:GetService("RunService")
local f = game:GetService("ReplicatedStorage")
local g = game.Players.LocalPlayer
local h = f.Packages.Knit.Services.ToolService.RF
local i = g:GetMouse()
local j = workspace.CurrentCamera
local k = game.Players.LocalPlayer.Character.Humanoid.Health
local function l(m, n)
    h.ToggleBlockSword:InvokeServer(m, n)
end
local o = a:CreateWindow({Name = "EightBall", Themeable = {Image = "7059346386", Credit = false}})
local p = o:CreateTab({Name = "Blatant"})
local q = p:CreateSection({Name = "Aura"})
local r = p:CreateSection({Name = "Bow Aura"})
local s = p:CreateSection({Name = "Movement", Side = "Right"})
local t = p:CreateSection({Name = "Strafe", Side = "Right"})
local u = p:CreateSection({Name = "Anti void", Side = "Right"})
local v = p:CreateSection({Name = "Anti lagback [beta]"})
local w = o:CreateTab({Name = "Closet"})
local x = w:CreateSection({Name = "Hitbox", Side = "Right"})
local y = w:CreateSection({Name = "Auto"})
local z = w:CreateSection({Name = "Lag", Side = "Right"})
local A = w:CreateSection({Name = "Aim"})
local B = o:CreateTab({Name = "Visuals"})
local C = B:CreateSection({Name = "chams"})
local D = B:CreateSection({Name = "Target hud"})
local E = B:CreateSection({Name = "Render", Side = "Right"})
local F, G, H, I = "Closest", "PreSimulation", false, 24
q:AddDropdown(
    {
        Name = "RunService type",
        Default = "PreSimulation",
        List = {"Stepped", "PreSimulation", "Heartbeat", "RenderStepped", "PreRender", "PostSimulation"},
        Callback = function(J)
            G = J
        end
    }
)
local function K()
    local L = game:GetService("Players"):GetPlayers()
    local M = nil
    local N = math.huge
    for O, P in ipairs(L) do
        local Q = P.Character
        if Q and Q:FindFirstChild("Humanoid") and Q.Humanoid.Health > 0 and not Q:FindFirstChildOfClass("ForceField") then
            local R =
                (Q.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude
            if R < N then
                N = R
                M = Q.HumanoidRootPart.Position
            end
        end
    end
    return M
end
local function S(T)
    local U = nil
    local V = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
    if T == "Closest" then
        local R = math.huge
        for O, W in ipairs(game.Players:GetPlayers()) do
            if
                W ~= game.Players.LocalPlayer and W.Character and W.Character:FindFirstChild("HumanoidRootPart") and
                    W.Character:FindFirstChild("Humanoid").Health > 0 and
                    not W.Character:FindFirstChildOfClass("ForceField")
             then
                local X = (V - W.Character.HumanoidRootPart.Position).Magnitude
                if X < R then
                    U, R = W, X
                end
            end
        end
    elseif T == "Random" then
        local Y = {}
        for O, W in ipairs(game.Players:GetPlayers()) do
            if
                W ~= game.Players.LocalPlayer and W.Character and W.Character:FindFirstChild("HumanoidRootPart") and
                    W.Character:FindFirstChild("Humanoid").Health > 0 and
                    not W.Character:FindFirstChildOfClass("ForceField")
             then
                local X = (V - W.Character.HumanoidRootPart.Position).Magnitude
                if X <= I then
                    table.insert(Y, W)
                end
            end
        end
        if #Y > 0 then
            U = Y[math.random(1, #Y)]
        end
    elseif T == "Farthest" then
        local Z = 0
        for O, W in ipairs(game.Players:GetPlayers()) do
            if
                W ~= game.Players.LocalPlayer and W.Character and W.Character:FindFirstChild("HumanoidRootPart") and
                    W.Character:FindFirstChild("Humanoid").Health > 0 and
                    not W.Character:FindFirstChildOfClass("ForceField")
             then
                local X = (V - W.Character.HumanoidRootPart.Position).Magnitude
                if X > Z and X <= I then
                    U, Z = W, X
                end
            end
        end
    elseif T == "Weakest" then
        local _ = math.huge
        for O, W in ipairs(game.Players:GetPlayers()) do
            if
                W ~= game.Players.LocalPlayer and W.Character and W.Character:FindFirstChild("HumanoidRootPart") and
                    W.Character:FindFirstChild("Humanoid").Health > 0 and
                    not W.Character:FindFirstChildOfClass("ForceField")
             then
                local X = (V - W.Character.HumanoidRootPart.Position).Magnitude
                if X <= I and W.Character.Humanoid.Health < _ then
                    U, _ = W, W.Character.Humanoid.Health
                end
            end
        end
    elseif T == "Strongest" then
        local a0 = 0
        for O, W in ipairs(game.Players:GetPlayers()) do
            if
                W ~= game.Players.LocalPlayer and W.Character and W.Character:FindFirstChild("HumanoidRootPart") and
                    W.Character:FindFirstChild("Humanoid").Health > 0 and
                    not W.Character:FindFirstChildOfClass("ForceField")
             then
                local X = (V - W.Character.HumanoidRootPart.Position).Magnitude
                if X <= I and W.Character.Humanoid.Health > a0 then
                    U, a0 = W, W.Character.Humanoid.Health
                end
            end
        end
    end
    return U
end
q:AddDropdown(
    {
        Name = "Targeting Mode",
        Default = "Closest",
        List = {"Closest", "Farthest", "Strongest", "Weakest", "Random"},
        Callback = function(J)
            F = J
        end
    }
)
local function a1()
    local a2 = S(F)
    if a2 then
        local X =
            (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - a2.Character.HumanoidRootPart.Position).Magnitude
        if X <= I and a2.Character.Humanoid.Health > 0 and not a2.Character:FindFirstChildOfClass("ForceField") then
            if H then
                for O, a3 in ipairs({"WoodenSword", "Sword"}) do
                    l(true, a3)
                end
            end
            for O, n in ipairs({"WoodenSword", "Sword"}) do
                h.AttackPlayerWithSword:InvokeServer(a2.Character, critsActive, n)
            end
        else
            if H then
                for O, a3 in ipairs({"WoodenSword", "Sword"}) do
                    l(false, a3)
                end
            end
        end
    end
end
local a4
local function a5(a6)
    if a6 then
        if not a4 then
            a4 =
                game:GetService("RunService")[G]:Connect(
                function()
                    pcall(a1)
                end
            )
        end
    elseif a4 then
        a4:Disconnect()
        a4 = nil
    end
end
q:AddToggle({Name = "Aura", Default = false, Keybind = 1, Callback = a5})
q:AddToggle(
    {Name = "Auto block", Default = false, Callback = function(a6)
            H = a6
        end}
)
q:AddToggle(
    {Name = "Crits", Default = false, Callback = function(a6)
            critsActive = a6
        end}
)
q:AddSlider(
    {Name = "Aura Range", Min = 1, Max = 36, Default = 24, Callback = function(J)
            I = J
        end}
)
local a7
q:AddToggle(
    {
        Name = "Click Aura",
        Default = false,
        Keybind = 1,
        Callback = function(a8)
            local P = game.Players.LocalPlayer
            local i = P:GetMouse()
            local function a9(P)
                local aa, ab = nil, math.huge
                for O, ac in pairs(game.Players:GetPlayers()) do
                    if ac ~= P and ac.Character and ac.Character:FindFirstChild("HumanoidRootPart") then
                        local R =
                            (P.Character.HumanoidRootPart.Position - ac.Character.HumanoidRootPart.Position).Magnitude
                        if R < ab then
                            ab, aa = R, ac
                        end
                    end
                end
                return aa
            end
            local function ad()
                local aa = a9(P)
                if aa and aa.Character then
                    local ae = {"WoodenSword", "Sword"}
                    for O, n in ipairs(ae) do
                        local af = {[1] = workspace:WaitForChild(aa.Name), [2] = true, [3] = n}
                        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild(
                            "Services"
                        ):WaitForChild("ToolService"):WaitForChild("RF"):WaitForChild("AttackPlayerWithSword"):InvokeServer(
                            unpack(af)
                        )
                    end
                end
            end
            if a8 then
                a7 = i.Button1Down:Connect(ad)
            else
                if a7 then
                    a7:Disconnect()
                    a7 = nil
                end
            end
        end
    }
)
local function ag()
    if FaceTarget then
        local ah = K()
        task.wait(0.05)
        local af = {[1] = Vector3.new(ah.X, ah.Y, ah.Z)}
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild(
            "ToolService"
        ):WaitForChild("RF"):WaitForChild("UpdateHeadRotation"):InvokeServer(unpack(af))
    end
end
game:GetService("RunService").Heartbeat:Connect(ag)
q:AddToggle(
    {Name = "Serverside Face", Default = false, Callback = function(a6)
            FaceTarget = a6
        end}
)
local ai, aj, ak, al, a6 = "Head", 30, 1, 0.1, false
local function am(an)
    local ao = game.Players.LocalPlayer:WaitForChild("Backpack"):FindFirstChild(an)
    if ao and ao:IsA("Tool") then
        ao.Parent = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
    end
end
local function ap(an)
    local ao = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait():FindFirstChild(an)
    if ao and ao:IsA("Tool") then
        ao.Parent = game.Players.LocalPlayer:WaitForChild("Backpack")
    end
end
local function aq(ar, as, at, ak)
    return ar + as * at + Vector3.new(0, ak, 0)
end
local function au(av, aw)
    local ax = Ray.new(av, (aw - av).unit * (aw - av).magnitude)
    local ay, az = workspace:FindPartOnRay(ax, game.Players.LocalPlayer.Character, false, true)
    return ay == nil
end
r:AddDropdown(
    {
        Name = "Target Part",
        List = {
            "Head",
            "HumanoidRootPart",
            "LeftLowerArm",
            "RightLowerArm",
            "LeftUpperArm",
            "RightUpperArm",
            "LeftLowerLeg",
            "UpperTorso",
            "LeftUpperLeg",
            "RightLowerLeg",
            "LowerTorso",
            "RightUpperLeg"
        },
        Default = ai,
        Callback = function(aA)
            ai = aA
        end
    }
)
r:AddSlider(
    {Name = "Charge time", Min = 0, Max = 50, Default = aj, Callback = function(J)
            aj = J
        end}
)
r:AddSlider(
    {Name = "Y Offset", Min = -15, Max = 15, Default = ak, Callback = function(J)
            ak = J
        end}
)
r:AddSlider(
    {Name = "Prediction", Min = 0, Max = 3.0, Default = al, Precise = 1, Callback = function(J)
            al = J
        end}
)
r:AddToggle(
    {Name = "Bow Aura", Callback = function(aB)
            a6 = aB
            if a6 then
                local aC = game.Players.LocalPlayer
                local function aD()
                    while a6 do
                        local Q = aC.Character or aC.CharacterAdded:Wait()
                        local aE = Q:FindFirstChild(ai)
                        local aF = aE and aE.Position
                        if not aF then
                            return
                        end
                        local aa, ab, aG
                        for O, P in ipairs(game.Players:GetPlayers()) do
                            if P ~= aC and P.Character then
                                local aH = P.Character:FindFirstChild(ai)
                                local ar = aH and aH.Position
                                local aI = P.Character.HumanoidRootPart.Velocity
                                if ar then
                                    local R = (ar - aF).magnitude
                                    local aJ = aq(ar, aI, al, ak)
                                    local aK = (aJ - aF).magnitude
                                    if not ab or aK < ab then
                                        if au(aF, aJ) then
                                            aa = P
                                            ab = aK
                                            aG = aJ
                                        end
                                    end
                                end
                            end
                        end
                        if aa and aG then
                            am("DefaultBow")
                            game.Players.LocalPlayer.Character.DefaultBow.__comm__.RF.Fire:InvokeServer(aG, aj)
                            ap("DefaultBow")
                        end
                        task.wait(3)
                    end
                end
                coroutine.wrap(aD)()
            end
        end}
)
local a6 = false
local aL = 10
local aM = 20
local aN = 0.3
local aO = 0.001
local a7
local aP = false
local function aQ(aR)
    aO = aO + aR
    if aO < aN then
        return
    end
    aO = 0
    local b = game:GetService("Players")
    local P = b.LocalPlayer
    local Q = P.Character
    if not Q then
        return
    end
    local aS = Q:FindFirstChild("Humanoid")
    if not aS then
        return
    end
    local aT = Q:FindFirstChild("HumanoidRootPart")
    if not aT then
        return
    end
    local aU = aT.CFrame
    local R = (aU.Position - lastValidPosition.Position).Magnitude
    if R > aL and R < aM then
        local aI = aS.MoveDirection * aS.WalkSpeed
        local aV = lastValidPosition.Position + aI * aN
        if (aU.Position - aV).Magnitude > aL then
            Q:SetPrimaryPartCFrame(lastValidPosition)
        else
            lastValidPosition = aU
        end
    else
        lastValidPosition = aU
    end
    if aP then
        local aW = aT.Position
        local aX = lastValidPosition.Position
        local aY = (aW - aX).Magnitude
        if aY > aM then
            local aZ = (aW - aX).unit
            aT.CFrame = CFrame.new(aX + aZ * aM)
        end
    end
end
v:AddToggle(
    {Name = "Anti lagback", Default = false, Callback = function(aB)
            a6 = aB
            if a6 then
                local b = game:GetService("Players")
                local e = game:GetService("RunService")
                local P = b.LocalPlayer
                local Q = P.Character or P.CharacterAdded:Wait()
                lastValidPosition = Q.PrimaryPart.CFrame
                a7 = e.Heartbeat:Connect(aQ)
            else
                if a7 then
                    a7:Disconnect()
                    a7 = nil
                end
            end
        end}
)
v:AddToggle(
    {Name = "Area Lock", Default = false, Callback = function(a_)
            aP = a_
        end}
)
v:AddSlider(
    {
        Name = "Lag Back Threshold",
        Min = 0,
        Max = 30,
        Default = aL,
        Increment = 0.1,
        ValueName = "studs",
        Callback = function(J)
            aL = J
        end
    }
)
v:AddSlider(
    {
        Name = "Max Prevention Distance",
        Min = 0,
        Max = 50,
        Default = aM,
        Increment = 0.1,
        ValueName = "studs",
        Callback = function(J)
            aM = J
        end
    }
)
v:AddSlider(
    {
        Name = "Update Delay",
        Min = 0,
        Max = 1,
        Default = aN,
        Increment = 0.01,
        ValueName = "seconds",
        Callback = function(J)
            aN = J
        end
    }
)
local b0, b1, b2, b3, b4, b5 = 1.0, false, false, 1.0 / 200, false, false
local function b6()
    if b2 then
        b4 = true
        if b5 then
            b5:Disconnect()
        end
        b5 =
            game:GetService("RunService").Stepped:Connect(
            function()
                if not b4 then
                    return
                end
                local b7 = b3
                if b1 and game.Players.LocalPlayer:GetAttribute("Blocking") == true then
                    b7 = b7 * b0
                end
                local Q = game.Players.LocalPlayer.Character
                if Q and Q:FindFirstChild("HumanoidRootPart") then
                    Q.HumanoidRootPart.CFrame = Q.HumanoidRootPart.CFrame + Q.Humanoid.MoveDirection * b7
                end
            end
        )
    else
        b4 = false
        if b5 then
            b5:Disconnect()
        end
    end
end
s:AddSlider(
    {Name = "Block speed", Min = 1, Max = 2.20, Value = b0, Precise = 2, Callback = function(J)
            b0 = J
        end}
)
s:AddToggle(
    {Name = "Block noslow", Value = b1, Callback = function(a6)
            b1 = a6
        end}
)
s:AddToggle(
    {Name = "Speed", Value = b2, Keybind = 1, Callback = function(a6)
            b2 = a6
            b6()
        end}
)
s:AddSlider(
    {Name = "Speed", Min = 0, Max = 50, Value = b3 * 200, Callback = function(b8, b9)
            b3 = b8 / 200
            if b2 then
                b6()
            end
        end}
)
game.Players.LocalPlayer.CharacterAdded:Connect(
    function()
        b6()
    end
)
s:AddSlider(
    {Name = "Gravity", Min = 0, Max = 192, Callback = function(b8, b9)
            workspace.Gravity = b8
        end}
)
local ba, bb, bc = {}, nil, false
local function bd()
    for O, aE in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        if aE:IsA("BasePart") and aE.CanCollide then
            ba[aE] = true
            aE.CanCollide = false
        end
    end
end
s:AddToggle(
    {Name = "Phase", Value = bc, Keybind = 1, Callback = function(a6)
            bc = a6
            if a6 then
                bb = game:GetService("RunService").Stepped:Connect(bd)
            else
                if bb then
                    bb:Disconnect()
                end
                for aE in pairs(ba) do
                    if aE then
                        aE.CanCollide = true
                    end
                end
                table.clear(ba)
            end
        end}
)
local be, bf = false, 0.80
s:AddToggle(
    {Name = "Air Check", Value = be, Callback = function(a6)
            be = a6
        end}
)
s:AddToggle(
    {Name = "Bhop", Value = BhopActive, Keybind = 1, Callback = function(a6)
            BhopActive = a6
            if a6 then
                while a6 do
                    if
                        not be or
                            game.Players.LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall
                     then
                        game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):ChangeState(
                            Enum.HumanoidStateType.Jumping
                        )
                        task.wait(bf)
                    end
                    if not BhopActive then
                        break
                    end
                    task.wait()
                end
            end
        end}
)
s:AddSlider(
    {Name = "Bhop delay", Min = 0, Max = 1, Precise = 2, Value = bf, Callback = function(b8, b9)
            bf = b8
        end}
)
local a6 = false
local bg = 0
s:AddToggle(
    {
        Name = "Derp",
        Default = false,
        Callback = function(aB)
            a6 = aB
            if a6 then
                local b = game:GetService("Players")
                local d = game:GetService("TweenService")
                local e = game:GetService("RunService")
                local function bh(Q)
                    local bi = Q:WaitForChild("HumanoidRootPart")
                    local bj = TweenInfo.new(0, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                    local bk = 0.01
                    local bl = 0
                    local function bm()
                        bl = (bl + bg) % (2 * math.pi)
                        local bn = bl
                        local bo = math.cos(bn) * bk
                        local bp = math.sin(bn) * bk
                        local ar = bi.Position + Vector3.new(bo, 0, bp)
                        local bq = (ar - bi.Position).Unit
                        local br = CFrame.new(bi.Position, bi.Position + bq)
                        local bs = d:Create(bi, bj, {CFrame = br})
                        bs:Play()
                    end
                    local bt
                    bt =
                        e.Heartbeat:Connect(
                        function()
                            if a6 then
                                bm()
                            else
                                bt:Disconnect()
                            end
                        end
                    )
                end
                local P = b.LocalPlayer
                local Q = P.Character or P.CharacterAdded:Wait()
                bh(Q)
                P.CharacterAdded:Connect(
                    function(bu)
                        if a6 then
                            bh(bu)
                        end
                    end
                )
            end
        end
    }
)
s:AddSlider(
    {Name = "Derp spin speed", Min = 0, Max = 30, Precise = 2, Default = bg, Callback = function(J)
            bg = J
        end}
)
local bv = false
local bw
local function bm(Q)
    if Q:FindFirstChild("HumanoidRootPart") then
        local bx = Q.HumanoidRootPart.Position
        local ak = Q.Humanoid.HipHeight - -1
        bw.Position = Vector3.new(bx.X, bx.Y - ak, bx.Z)
    end
end
s:AddToggle(
    {Name = "Fly", Value = bv, Keybind = 1, Callback = function(a6)
            bv = a6
            local P = game.Players.LocalPlayer
            local Q = P.Character or P.CharacterAdded:Wait()
            if a6 then
                bw = Instance.new("Part")
                bw.Size = Vector3.new(2, 0.1, 2)
                bw.Anchored = true
                bw.CanCollide = true
                bw.Transparency = 1
                bw.BrickColor = BrickColor.new("Medium stone grey")
                bw.Parent = game.Workspace
                while bv do
                    bm(Q)
                    task.wait()
                end
            else
                if bw then
                    bw:Destroy()
                end
            end
        end}
)
local by, bz = false, 0.02
local function bA(bB, bC, bD)
    local bE, bF, bG = math.clamp, Vector3.new, tick()
    local bH = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if bH then
        bH.Anchored = true
    end
    while tick() - bG <= bz do
        if bH then
            bH.Velocity = bF(bE(bH.Velocity.X, -bB, bB), bE(bH.Velocity.Y, -bC, bC), bE(bH.Velocity.Z, -bD, bD))
        end
        task.wait()
    end
    if bH then
        bH.Anchored = false
    end
end
local function bI(bJ)
    if by and k and bJ < k then
        bA(0, 0, 0)
    end
    k = bJ
end
local function bK()
    while by do
        bI(game.Players.LocalPlayer.Character.Humanoid.Health)
        task.wait(0.03)
    end
end
game.Players.LocalPlayer.Character.Humanoid.HealthChanged:Connect(bI)
s:AddToggle(
    {Name = "Antikb", Default = false, Callback = function(J)
            by = J
            if by then
                spawn(bK)
            end
        end}
)
s:AddSlider(
    {Name = "Anti kb no-move", Min = 0, Max = 1, Precise = 2, Default = 0.02, Callback = function(J)
            bz = J
        end}
)
local bL = false
local bM = 20
local bN = 20
local bO = false
local bP, bQ, bR
local function bS()
    local ab, bT = math.huge, nil
    local P = game.Players.LocalPlayer
    local Q = P.Character or P.CharacterAdded:Wait()
    for O, ac in pairs(game:GetService("Players"):GetPlayers()) do
        local bU = ac.Character
        local bV = bU and bU:FindFirstChild("HumanoidRootPart")
        if ac ~= P and bV and bU.Humanoid.Health > 0 then
            local R = (Q.HumanoidRootPart.Position - bV.Position).magnitude
            if R < ab and R <= bN then
                ab, bT = R, ac
            end
        end
    end
    return bT
end
local function bm()
    local P = game.Players.LocalPlayer
    local Q = P.Character
    local bi = Q and Q:FindFirstChild("HumanoidRootPart")
    if bi and bP and bP.Character then
        local bW = bP.Character:FindFirstChild("HumanoidRootPart")
        if bW and bP.Character.Humanoid.Health > 0 then
            local ar = bW.Position
            if (bi.Position - ar).magnitude <= bN then
                task.wait(0.0195)
                if bP ~= bQ then
                    if P:GetAttribute("Blocking") == true then
                        P:SetAttribute("Blocking", false)
                        task.wait(0.068)
                        if bO then
                            local aZ = (ar - bi.Position).unit
                            bi.CFrame = CFrame.new(bi.Position + aZ * bM * 0.0195)
                        else
                            bi.CFrame = CFrame.new(bi.Position):lerp(CFrame.new(ar), bM * 0.01)
                        end
                        P:SetAttribute("Blocking", true)
                    else
                        if bO then
                            local aZ = (ar - bi.Position).unit
                            bi.CFrame = CFrame.new(bi.Position + aZ * bM * 0.0195)
                        else
                            bi.CFrame = CFrame.new(bi.Position):lerp(CFrame.new(ar), bM * 0.01)
                        end
                    end
                    bQ = bP
                else
                    if bO then
                        local aZ = (ar - bi.Position).unit
                        bi.CFrame = CFrame.new(bi.Position + aZ * bM * 0.0195)
                    else
                        bi.CFrame = CFrame.new(bi.Position):lerp(CFrame.new(ar), bM * 0.01)
                    end
                end
            else
                bP = nil
            end
        else
            bP = nil
        end
    else
        bP = bS()
    end
end
t:AddToggle(
    {Name = "Strafe", Keybind = 1, Default = false, Callback = function(J)
            bL = J
            if J then
                bR = game:GetService("RunService").RenderStepped:Connect(bm)
            elseif bR then
                bR:Disconnect()
                bR = nil
            end
        end}
)
t:AddSlider(
    {Name = "Follow Speed", Min = 0, Max = 30, Precise = 2, Value = bM, Callback = function(b8)
            bM = b8
        end}
)
t:AddSlider(
    {Name = "Max Target Distance", Min = 1, Max = 100, Value = bN, Callback = function(b8)
            bN = b8
        end}
)
t:AddToggle(
    {Name = "Linear", Default = false, Callback = function(J)
            bO = J
        end}
)
local bX
u:AddToggle(
    {Name = "Antivoid", Value = false, Callback = function(a6)
            if a6 then
                bX = Instance.new("Part")
                bX.Name = "Antivoid"
                bX.Position = Vector3.new(0, -150, 0)
                bX.Size = Vector3.new(1000, 1, 1000)
                bX.Anchored = true
                bX.CanCollide = true
                bX.Transparency = 1
                bX.BrickColor = BrickColor.new("Medium stone grey")
                bX.Parent = game.Workspace
            else
                local bY = game.Workspace:FindFirstChild("Antivoid")
                if bY then
                    bY:Destroy()
                end
            end
        end}
)
u:AddSlider(
    {Name = "Antivoid Transparency", Value = 0, Min = 0, Max = 1, Precise = 1, Callback = function(bZ)
            if bX then
                bX.Transparency = bZ
            end
        end}
)
local b_, c0, c1, c2, c3, c4, c5, c6 = 1, 1, 1, false, nil, 0.5, Enum.Material.Neon, Color3.fromRGB(225, 160, 255)
x:AddSlider(
    {Name = "X axis", Min = 1, Max = 10, Callback = function(J)
            b_ = J
        end}
)
x:AddSlider(
    {Name = "Y axis", Min = 1, Max = 10, Callback = function(J)
            c0 = J
        end}
)
x:AddSlider(
    {Name = "Z axis", Min = 1, Max = 10, Callback = function(J)
            c1 = J
        end}
)
x:AddSlider(
    {Name = "Transparency", Min = 0, Max = 1, Callback = function(J)
            c4 = J
        end}
)
x:AddDropdown(
    {
        Name = "Material",
        List = {"Plastic", "SmoothPlastic", "Neon", "ForceField", "Glass"},
        Default = "Neon",
        Callback = function(aA)
            if aA == "Plastic" then
                c5 = Enum.Material.Plastic
            elseif aA == "SmoothPlastic" then
                c5 = Enum.Material.SmoothPlastic
            elseif aA == "Neon" then
                c5 = Enum.Material.Neon
            elseif aA == "ForceField" then
                c5 = Enum.Material.ForceField
            elseif aA == "Glass" then
                c5 = Enum.Material.Glass
            end
        end
    }
)
x:AddColorPicker(
    {Name = "Color", Default = c6, Callback = function(c7)
            c6 = c7
        end}
)
x:AddToggle(
    {Name = "Hitbox Visual", Callback = function(a6)
            c2 = a6
        end}
)
x:AddToggle(
    {
        Name = "Hitbox",
        Callback = function(a6)
            if a6 then
                local function c8()
                    c3 =
                        game:GetService("RunService").RenderStepped:Connect(
                        function()
                            for O, P in ipairs(game:GetService("Players"):GetPlayers()) do
                                if P.Name ~= game:GetService("Players").LocalPlayer.Name then
                                    pcall(
                                        function()
                                            local bi = P.Character and P.Character:FindFirstChild("HumanoidRootPart")
                                            if bi then
                                                bi.Size = Vector3.new(b_, c0, c1)
                                                bi.Transparency = c2 and c4 or 1
                                                bi.Material = c5
                                                bi.Color = c6
                                                bi.CanCollide = false
                                            end
                                        end
                                    )
                                end
                            end
                        end
                    )
                end
                c8()
            else
                if c3 then
                    c3:Disconnect()
                    c3 = nil
                end
                for O, P in ipairs(game:GetService("Players"):GetPlayers()) do
                    if P.Name ~= game:GetService("Players").LocalPlayer.Name then
                        pcall(
                            function()
                                local bi = P.Character and P.Character:FindFirstChild("HumanoidRootPart")
                                if bi then
                                    bi.Size = Vector3.new(2, 2, 2)
                                    bi.Transparency = 1
                                    bi.Material = Enum.Material.Plastic
                                    bi.CanCollide = false
                                end
                            end
                        )
                    end
                end
            end
        end
    }
)
local c9, ca, cb = false, false, 18
y:AddToggle(
    {Name = "Auto Clicker", Keybind = 1, Callback = function(a6)
            c9 = a6
            if a6 then
                ca = true
                while c9 and ca do
                    mouse1click()
                    task.wait(1 / cb)
                end
            else
                ca = false
            end
        end}
)
y:AddSlider(
    {Name = "CPS", Min = 1, Max = 50, Def = cb, Callback = function(bZ)
            cb = bZ
        end}
)
local cc, i, cd, ce = game:GetService("UserInputService"), game.Players.LocalPlayer:GetMouse(), false, false
local a7
y:AddToggle(
    {
        Name = "Double click",
        Callback = function(a6)
            ce = a6
            if a6 then
                a7 =
                    cc.InputBegan:Connect(
                    function(cf, cg)
                        if not cg and cf.UserInputType == Enum.UserInputType.MouseButton1 and not cd then
                            task.wait(0.1)
                            cd = true
                            mouse1click()
                            cd = false
                        end
                    end
                )
            elseif a7 then
                a7:Disconnect()
            end
        end
    }
)
y:AddToggle(
    {
        Name = "Trigger bot",
        Keybind = 1,
        Callback = function(a6)
            triggerbotActive = a6
            local ch
            local ci = 0
            local minInterval = 1 / cpslimit
            local function cj(ck)
                for O, P in pairs(game.Players:GetPlayers()) do
                    if P.Character and ck and ck:IsDescendantOf(P.Character) then
                        return true
                    end
                end
                return false
            end
            if a6 then
                ch =
                    game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if cj(game.Players.LocalPlayer:GetMouse().Target) then
                            local cl = tick()
                            if cl - ci >= minInterval then
                                ci = cl
                                mouse1press()
                                task.wait()
                                mouse1release()
                            end
                        end
                    end
                )
                getgenv().disable = function()
                    if ch then
                        warn("Disconnecting:", ch)
                        ch:Disconnect()
                        ch = nil
                    end
                    getgenv().disable = nil
                end
            else
                if getgenv().disable then
                    getgenv().disable()
                end
            end
        end
    }
)
y:AddSlider(
    {Name = "CPS limit", Min = 1, Max = 50, Def = cpslimit, Callback = function(bZ)
            cpslimit = bZ
            minInterval = 1 / cpslimit
        end}
)
local cm, cn, co, cp, cq = "None", 0, 0, 0, 0
local function cr(J)
    settings():GetService("NetworkSettings").IncomingReplicationLag = J
end
z:AddDropdown(
    {
        Name = "Method",
        List = {"ReplicationLag", "Axis", "None"},
        Default = cm,
        Callback = function(aA)
            cm = aA
            if cm == "ReplicationLag" then
                getgenv().Axis = false
                cr(cn)
            elseif cm == "Axis" then
                getgenv().Axis = true
                getgenv().Z = cq
                getgenv().Y = cp
                getgenv().X = co
                game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if getgenv().Axis then
                            local cs = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
                            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity =
                                Vector3.new(getgenv().X, getgenv().Y, getgenv().Z)
                            game:GetService("RunService").RenderStepped:Wait()
                            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = cs
                        end
                    end
                )
                cr(0)
            end
        end
    }
)
z:AddSlider(
    {Name = "Client Lag", Min = 0, Max = 10, Precise = 2, Def = cn, Callback = function(bZ)
            cn = bZ
            if cm == "ReplicationLag" then
                cr(cn)
            end
        end}
)
z:AddSlider(
    {Name = "Axis Lag x", Min = 0, Max = 500, Def = co, Callback = function(bZ)
            co = bZ
        end}
)
z:AddSlider(
    {Name = "Axis Lag y", Min = 0, Max = 500, Def = cp, Callback = function(bZ)
            cp = bZ
        end}
)
z:AddSlider(
    {Name = "Axis Lag z", Min = 0, Max = 500, Def = cq, Callback = function(bZ)
            cq = bZ
        end}
)
local ct, cu, cv, cw, ai = false, 1, 30, 30, "Head"
local function cx(cy, cz, cA, cB)
    return cy:Lerp(cz, cA * cB)
end
local function cC(aR)
    if ct then
        local cD = nil
        local N = math.huge
        local aC = game:GetService("Players").LocalPlayer
        local cE = aC.Character
        if cE then
            local cF = cE:FindFirstChild(ai).Position
            local cG = cE:FindFirstChild(ai).CFrame.lookVector
            for O, P in ipairs(game:GetService("Players"):GetPlayers()) do
                if P ~= aC then
                    local cH = P.Character
                    if cH then
                        local cI = cH:FindFirstChild(ai) and cH:FindFirstChild(ai).Position
                        if cI then
                            local R = (cF - cI).magnitude
                            if R < N and R <= cv then
                                local cJ = (cI - cF).unit
                                local bn = math.acos(cG:Dot(cJ)) * 180 / math.pi
                                if bn <= cw then
                                    N = R
                                    cD = P
                                end
                            end
                        end
                    end
                end
            end
        end
        if cD then
            local cK = game:GetService("Workspace").CurrentCamera.CFrame
            local cL = cD.Character:FindFirstChild(ai) and cD.Character:FindFirstChild(ai).Position
            if cL then
                local cM = CFrame.new(cK.Position, cL)
                local cN = cx(cK, cM, aR, cu)
                game:GetService("Workspace").CurrentCamera.CFrame = cN
            end
        end
    end
end
A:AddToggle(
    {Name = "Aim Assist", Keybind = 1, Callback = function(a6)
            ct = a6
        end}
)
A:AddDropdown(
    {
        Name = "Target Part",
        List = {
            "Head",
            "HumanoidRootPart",
            "LeftLowerArm",
            "RightLowerArm",
            "LeftUpperArm",
            "RightUpperArm",
            "LeftLowerLeg",
            "UpperTorso",
            "LeftUpperLeg",
            "RightLowerLeg",
            "LowerTorso",
            "RightUpperLeg"
        },
        Default = ai,
        Callback = function(aA)
            ai = aA
        end
    }
)
A:AddSlider(
    {Name = "Smoothness", Min = 1, Max = 25, Default = 1, Precise = 2, Callback = function(J)
            cu = J
        end}
)
A:AddSlider(
    {Name = "Range", Min = 5, Max = 100, Default = 30, Callback = function(J)
            cv = J
        end}
)
A:AddSlider(
    {Name = "Aim fov", Min = 0, Max = 360, Default = 30, Callback = function(J)
            cw = J
        end}
)
game:GetService("RunService").RenderStepped:Connect(
    function(aR)
        cC(aR)
    end
)
local cO = 40
D:AddSlider(
    {Name = "Hide distance", Min = 0, Max = 250, Value = cO, Callback = function(J)
            cO = J
        end}
)
D:AddToggle(
    {
        Name = "Target Hud",
        Callback = function(a6)
            if a6 then
                local b = game:GetService("Players")
                local e = game:GetService("RunService")
                local d = game:GetService("TweenService")
                local cP = game:GetService("UserInputService")
                local g = b.LocalPlayer
                local function cQ(cR, cS, cT)
                    local cU = Instance.new(cR)
                    for cV, J in pairs(cS) do
                        cU[cV] = J
                    end
                    cU.Parent = cT
                    return cU
                end
                local function cW(cX)
                    local cY = workspace.CurrentCamera.ViewportSize
                    local cZ = cX.Size
                    cX.Position = UDim2.new(0.5, -cZ.X.Offset / 2, 0.5, -cZ.Y.Offset / 2)
                end
                local c_ = cQ("ScreenGui", {Name = "TargetHUD"}, g.PlayerGui)
                local d0 =
                    cQ(
                    "Frame",
                    {
                        Size = UDim2.new(0, 280, 0, 130),
                        BackgroundColor3 = Color3.new(0.1, 0.1, 0.1),
                        BorderSizePixel = 0,
                        Draggable = true
                    },
                    c_
                )
                cQ("UICorner", {CornerRadius = UDim.new(0, 10)}, d0)
                local d1 =
                    cQ(
                    "TextLabel",
                    {
                        Size = UDim2.new(1, 0, 0, 35),
                        Position = UDim2.new(0, 0, 0, 5),
                        BackgroundTransparency = 1,
                        TextColor3 = Color3.new(1, 1, 1),
                        TextSize = 22,
                        Font = Enum.Font.SourceSansBold
                    },
                    d0
                )
                local d2 =
                    cQ(
                    "Frame",
                    {
                        Size = UDim2.new(0.92, 0, 0, 20),
                        Position = UDim2.new(0.04, 0, 0.38, 0),
                        BackgroundColor3 = Color3.new(0.2, 0.2, 0.2),
                        BorderSizePixel = 0
                    },
                    d0
                )
                cQ("UICorner", {CornerRadius = UDim.new(0, 4)}, d2)
                local d3 =
                    cQ(
                    "Frame",
                    {Size = UDim2.new(1, 0, 1, 0), BackgroundColor3 = Color3.new(1, 1, 1), BorderSizePixel = 0},
                    d2
                )
                cQ("UICorner", {CornerRadius = UDim.new(0, 4)}, d3)
                local d4 =
                    cQ(
                    "TextLabel",
                    {
                        Size = UDim2.new(1, 0, 1, 0),
                        BackgroundTransparency = 1,
                        TextColor3 = Color3.new(0, 0, 0),
                        TextSize = 18,
                        Font = Enum.Font.SourceSansBold
                    },
                    d2
                )
                local d5 =
                    cQ(
                    "TextLabel",
                    {
                        Size = UDim2.new(0, 110, 0, 25),
                        Position = UDim2.new(0, 10, 1, -30),
                        BackgroundTransparency = 0.5,
                        BackgroundColor3 = Color3.new(0, 0.5, 1),
                        TextColor3 = Color3.new(1, 1, 1),
                        TextSize = 16,
                        Font = Enum.Font.SourceSansBold,
                        TextXAlignment = Enum.TextXAlignment.Center
                    },
                    d0
                )
                cQ("UICorner", {CornerRadius = UDim.new(0, 5)}, d5)
                local d6 =
                    cQ(
                    "TextLabel",
                    {
                        Size = UDim2.new(0, 110, 0, 25),
                        Position = UDim2.new(1, -120, 1, -30),
                        BackgroundTransparency = 0.5,
                        BackgroundColor3 = Color3.new(0.2, 0.2, 0.2),
                        TextColor3 = Color3.new(1, 1, 1),
                        TextSize = 16,
                        Font = Enum.Font.SourceSansBold,
                        TextXAlignment = Enum.TextXAlignment.Center
                    },
                    d0
                )
                cQ("UICorner", {CornerRadius = UDim.new(0, 5)}, d6)
                cW(d0)
                local d7 = false
                local d8 = nil
                local d9 = nil
                local da = d0.Position
                local db = nil
                local function dc(cf)
                    d7 = true
                    d8 = cf.Position
                    d9 = d0.Position
                    if db then
                        db:Cancel()
                    end
                end
                local function dd(cf)
                    if d7 then
                        local de = cf.Position - d8
                        local df = UDim2.new(d9.X.Scale, d9.X.Offset + de.X, d9.Y.Scale, d9.Y.Offset + de.Y)
                        d0.Position = df
                    end
                end
                local function dg()
                    d7 = false
                    local df = d0.Position
                    db = d:Create(d0, TweenInfo.new(0.3), {Position = df})
                    db:Play()
                end
                d0.InputBegan:Connect(
                    function(cf)
                        if cf.UserInputType == Enum.UserInputType.MouseButton1 then
                            dc(cf)
                        end
                    end
                )
                cP.InputChanged:Connect(
                    function(cf)
                        if d7 and cf.UserInputType == Enum.UserInputType.MouseMovement then
                            dd(cf)
                        end
                    end
                )
                cP.InputEnded:Connect(
                    function(cf)
                        if cf.UserInputType == Enum.UserInputType.MouseButton1 then
                            dg()
                        end
                    end
                )
                local function dh()
                    local aa, ab = nil, math.huge
                    for O, P in pairs(b:GetPlayers()) do
                        if P ~= g and P.Character and P.Character:FindFirstChild("HumanoidRootPart") then
                            local di = g.Character or g.CharacterAdded:Wait()
                            local dj = di:WaitForChild("HumanoidRootPart")
                            local R = (P.Character.HumanoidRootPart.Position - dj.Position).Magnitude
                            if R <= cO and R < ab then
                                aa, ab = P, R
                            end
                        end
                    end
                    if aa then
                        local dk = aa.Character:FindFirstChild("Humanoid")
                        local di = g.Character or g.CharacterAdded:Wait()
                        local dl = di:FindFirstChild("Humanoid")
                        d1.Text = aa.Name
                        d5.Text = string.format("Distance %.1f", ab)
                        if dk then
                            d4.Text = tostring(math.floor(dk.Health))
                            d:Create(d3, TweenInfo.new(0.3), {Size = UDim2.new(dk.Health / dk.MaxHealth, 0, 1, 0)}):Play(

                            )
                        else
                            d4.Text = "N/A"
                            d3.Size = UDim2.new(0, 0, 1, 0)
                        end
                        if dl and dk then
                            local dm = dl.Health / dl.MaxHealth
                            local dn = dk.Health / dk.MaxHealth
                            if dm > dn then
                                d6.Text = "Winning"
                                d6.BackgroundColor3 = Color3.new(0, 0.7, 0)
                            elseif dm < dn then
                                d6.Text = "Losing"
                                d6.BackgroundColor3 = Color3.new(0.7, 0, 0)
                            else
                                d6.Text = "Even"
                                d6.BackgroundColor3 = Color3.new(0.7, 0.7, 0)
                            end
                        else
                            d6.Text = "N/A"
                            d6.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
                        end
                        d0.Visible = true
                    else
                        d0.Visible = false
                    end
                end
                e.RenderStepped:Connect(dh)
            else
                if g.PlayerGui:FindFirstChild("TargetHUD") then
                    g.PlayerGui.TargetHUD:Destroy()
                end
            end
        end
    }
)
E:AddToggle(
    {Name = "Hide guis", Callback = function(dp)
            if dp then
                game.Players.LocalPlayer.PlayerGui.MainGui["BRIDGE DUEL"].Visible = false
            else
                game.Players.LocalPlayer.PlayerGui.MainGui["BRIDGE DUEL"].Visible = true
            end
        end}
)
local dq = {Ambient = nil, OutdoorAmbient = nil, FogColor = nil, FogStart = nil, FogEnd = nil, PartColors = {}}
local dr, ds, dt = Color3.new(225, 160, 255), Color3.fromRGB(225, 160, 255), Vector3.new(2, 1, 3)
local du = false
local function dv(a6)
    local dw = game:GetService("Lighting")
    if a6 then
        dq.Ambient = dw.Ambient
        dq.OutdoorAmbient = dw.OutdoorAmbient
        dq.FogColor = dw.FogColor
        dq.FogStart = dw.FogStart
        dq.FogEnd = dw.FogEnd
        for O, aE in ipairs(workspace:GetDescendants()) do
            if aE:IsA("BasePart") then
                dq.PartColors[aE] = aE.Color
            end
        end
        dw.Ambient = dr
        dw.OutdoorAmbient = dr
        dw.FogColor = dr
        dw.FogStart = dq.FogStart or 0
        dw.FogEnd = dq.FogEnd or 100
        for O, aE in ipairs(workspace:GetDescendants()) do
            if aE:IsA("BasePart") then
                aE.Color = dr
            end
        end
    else
        dw.Ambient = dq.Ambient
        dw.OutdoorAmbient = dq.OutdoorAmbient
        dw.FogColor = dq.FogColor
        dw.FogStart = dq.FogStart
        dw.FogEnd = dq.FogEnd
        for O, aE in ipairs(workspace:GetDescendants()) do
            if aE:IsA("BasePart") and dq.PartColors[aE] then
                aE.Color = dq.PartColors[aE]
            end
        end
    end
end
E:AddToggle(
    {Name = "Ambient", Callback = function(a6)
            dv(a6)
        end}
)
local dx = {}
E:AddToggle(
    {Name = "Low gfx", Callback = function(dp)
            local workspace = game:GetService("Workspace")
            for O, aE in ipairs(workspace:GetDescendants()) do
                if aE:IsA("BasePart") then
                    if dp then
                        dx[aE] = aE.Material
                        aE.Material = Enum.Material.Ice
                    else
                        aE.Material = dx[aE] or aE.Material
                        dx[aE] = nil
                    end
                end
            end
        end}
)
E:AddToggle(
    {
        Name = "Water mark",
        Value = false,
        Callback = function(J)
            local b = game:GetService("Players")
            local d = game:GetService("TweenService")
            local e = game:GetService("RunService")
            local function dy(P)
                local dz = P:WaitForChild("PlayerGui")
                local dA = Instance.new("ScreenGui")
                dA.Name = "GameSenseWatermark"
                dA.ResetOnSpawn = false
                local cX = Instance.new("Frame")
                cX.Size = UDim2.new(0, 280, 0, 25)
                cX.Position = UDim2.new(0, -280, 0, 10)
                cX.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
                cX.BorderSizePixel = 0
                cX.Parent = dA
                local dB = Instance.new("UICorner")
                dB.CornerRadius = UDim.new(0, 4)
                dB.Parent = cX
                local dC = Instance.new("Frame")
                dC.Size = UDim2.new(1, 0, 0, 2)
                dC.Position = UDim2.new(0, 0, 0, 0)
                dC.BorderSizePixel = 0
                dC.Parent = cX
                local dD = Instance.new("UIGradient")
                dD.Color =
                    ColorSequence.new {
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(128, 0, 128))
                }
                dD.Parent = dC
                local dE = Instance.new("ImageLabel")
                dE.Size = UDim2.new(0, 60, 0, 60)
                dE.Position = UDim2.new(0, -15, 0.5, -30)
                dE.BackgroundTransparency = 1
                dE.Image = "rbxassetid://18335445948"
                dE.Parent = cX
                local dF = Instance.new("TextLabel")
                dF.Size = UDim2.new(1, -60, 1, 0)
                dF.Position = UDim2.new(0, 40, 0, 0)
                dF.BackgroundTransparency = 1
                dF.Font = Enum.Font.Code
                dF.TextColor3 = Color3.fromRGB(255, 255, 255)
                dF.TextSize = 16
                dF.Text = "8 ball | 00:00:00"
                dF.TextXAlignment = Enum.TextXAlignment.Left
                dF.Parent = cX
                dA.Parent = dz
                local bj = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                local dG = d:Create(cX, bj, {Position = UDim2.new(0, 10, 0, 10)})
                dG:Play()
                local bG = tick()
                local a7
                a7 =
                    e.Heartbeat:Connect(
                    function()
                        if dA.Parent == nil then
                            a7:Disconnect()
                            return
                        end
                        local dH = tick() - bG
                        local dI = math.floor(dH / 3600)
                        local dJ = math.floor(dH % 3600 / 60)
                        local dK = math.floor(dH % 60)
                        dF.Text = string.format("8 ball | %02d:%02d:%02d", dI, dJ, dK)
                    end
                )
            end
            local function dL(P)
                local dz = P:FindFirstChild("PlayerGui")
                if dz then
                    local dA = dz:FindFirstChild("GameSenseWatermark")
                    if dA then
                        local cX = dA:FindFirstChildOfClass("Frame")
                        if cX then
                            local bj = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                            local dG = d:Create(cX, bj, {Position = UDim2.new(0, -280, 0, 10)})
                            dG:Play()
                            dG.Completed:Connect(
                                function()
                                    dA:Destroy()
                                end
                            )
                        else
                            dA:Destroy()
                        end
                    end
                end
            end
            if J then
                for O, P in ipairs(b:GetPlayers()) do
                    dy(P)
                end
                b.PlayerAdded:Connect(dy)
            else
                for O, P in ipairs(b:GetPlayers()) do
                    dL(P)
                end
                b.PlayerAdded:Connect(dL)
            end
        end
    }
)
local function dM()
    local dN = game:GetService("Workspace").Camera:FindFirstChild("Viewmodel")
    if dN then
        local dO = dN:FindFirstChild("WoodenSword")
        if dO then
            local dP = dO:FindFirstChild("MainPart")
            if dP then
                return dP:FindFirstChild("Mesh")
            end
        end
    end
    return nil
end
E:AddToggle(
    {Name = "Custom sword", Callback = function(a6)
            du = a6
            if not du then
                local dQ = dM()
                if dQ then
                    dQ.Offset = Vector3.new(0, 0, 0)
                end
            end
        end}
)
game:GetService("RunService").Heartbeat:Connect(
    function()
        if du then
            local dQ = dM()
            if dQ then
                dQ.Offset = dt
            end
        end
    end
)
local function dR()
    if du then
        local dQ = dM()
        if dQ then
            dQ.Offset = dt
        end
    end
end
E:AddSlider(
    {Name = "Sword front", Min = -10, Max = 10, Value = dt.X, Callback = function(J)
            dt = Vector3.new(J, dt.Y, dt.Z)
            dR()
        end}
)
E:AddSlider(
    {Name = "Sword vertical", Min = -10, Max = 10, Value = dt.Y, Callback = function(J)
            dt = Vector3.new(dt.X, J, dt.Z)
            dR()
        end}
)
E:AddSlider(
    {Name = "Sword side", Min = -10, Max = 10, Value = dt.Z, Callback = function(J)
            dt = Vector3.new(dt.X, dt.Y, J)
            dR()
        end}
)
E:AddSlider(
    {Name = "Fog Start", Min = 0, Max = 1000, Value = dq.FogStart or 0, Callback = function(J)
            dq.FogStart = J
            if du then
                game:GetService("Lighting").FogStart = J
            end
        end}
)
E:AddSlider(
    {Name = "Fog End", Min = 0, Max = 1000, Value = dq.FogEnd or 100, Callback = function(J)
            dq.FogEnd = J
            if du then
                game:GetService("Lighting").FogEnd = J
            end
        end}
)
E:AddColorpicker(
    {Name = "Atmo color", Value = dr, Callback = function(dS, dT)
            dr = dS
            if a6 then
                local dw = game:GetService("Lighting")
                dw.Ambient = dr
                dw.OutdoorAmbient = dr
                dw.FogColor = dr
                for O, aE in ipairs(workspace:GetDescendants()) do
                    if aE:IsA("BasePart") then
                        aE.Color = dr
                    end
                end
            end
        end}
)
local dU, dV = 1, false
getgenv().res = dU
E:AddToggle(
    {Name = "ress", Callback = function(dp)
            dV = dp
            if dp then
                while dV do
                    game:GetService("RunService").RenderStepped:Wait()
                    j.CFrame = j.CFrame * CFrame.new(0, 0, 0, 1, 0, 0, 0, getgenv().res, 0, 0, 0, 1)
                end
            end
        end}
)
E:AddSlider(
    {Name = "Resolution", Min = 0, Max = 1.2, Precise = 2, Value = dU, Callback = function(J)
            getgenv().res = J
        end}
)
local dW = 0.5
local dX = Color3.fromRGB(200, 150, 255)
local dY, dZ, d_ = false, false, false
local e0
local function e1(e2)
    return Color3.new(e2.r, e2.g, e2.b)
end
local function e3(W)
    local e4 = Instance.new("Highlight")
    e4.Name = W.Name
    e4.FillColor = dX
    e4.DepthMode = "AlwaysOnTop"
    e4.FillTransparency = dW
    e4.OutlineTransparency = dW
    e4.Parent = e0
    e4.Adornee = W.Character
    W.CharacterAdded:Connect(
        function(e5)
            e4.Adornee = e5
        end
    )
    W:GetPropertyChangedSignal("Team"):Connect(
        function()
            e4.FillColor = e1(W.TeamColor)
        end
    )
end
local function e6()
    for O, P in ipairs(game.Players:GetPlayers()) do
        if P == game.Players.LocalPlayer then
            if dY then
                if not e0:FindFirstChild(P.Name) then
                    e3(P)
                end
            else
                local e7 = e0:FindFirstChild(P.Name)
                if e7 then
                    e7:Destroy()
                end
            end
        else
            if not e0:FindFirstChild(P.Name) then
                e3(P)
            end
        end
    end
end
local function e8(e9)
    d_ = e9
    if e9 then
        e0 = Instance.new("Folder", game:GetService("CoreGui"))
        e0.Name = "Highlight_Storage"
        e6()
        coroutine.wrap(
            function()
                while d_ do
                    task.wait(0.15)
                    e6()
                end
            end
        )()
    else
        if e0 then
            e0:Destroy()
            e0 = nil
        end
    end
end
local function ea(e9)
    dY = e9
    e6()
end
local function eb(e9)
    dZ = e9
    e6()
end
local function ec(dS)
    dX = dS
    if e0 then
        for O, ed in ipairs(e0:GetChildren()) do
            ed.FillColor = dS
        end
    end
end
C:AddToggle({Name = "Chams", Value = false, Callback = e8})
C:AddColorpicker({Name = "Color", Value = dX, Callback = ec})
C:AddToggle({Name = "Self", Value = false, Callback = ea})
C:AddSlider(
    {Name = "Transparency", Min = 0, Max = 1, Value = dW, Callback = function(J)
            dW = J
            if e0 then
                for O, ed in ipairs(e0:GetChildren()) do
                    ed.FillTransparency = J
                    ed.OutlineTransparency = J
                end
            end
        end}
)
C:AddToggle(
    {
        Name = "Cape",
        Value = false,
        Callback = function(J)
            local P = game.Players.LocalPlayer
            local Q = P.Character
            local function ee()
                local aS = Q:WaitForChild("Humanoid")
                local ef =
                    aS.RigType == Enum.HumanoidRigType.R15 and Q:WaitForChild("UpperTorso") or Q:WaitForChild("Torso")
                local eg = Instance.new("Part", Q)
                eg.Name = "Cape"
                eg.Anchored = false
                eg.CanCollide = false
                eg.TopSurface = Enum.SurfaceType.Smooth
                eg.BottomSurface = Enum.SurfaceType.Smooth
                eg.Size = Vector3.new(0.2, 0.2, 0.2)
                eg.Transparency = 0
                eg.BrickColor = BrickColor.new("Really black")
                local eh = Instance.new("BlockMesh", eg)
                eh.Scale = Vector3.new(9, 17.5, 0.08)
                local ei = Instance.new("Motor", eg)
                ei.Part0 = eg
                ei.Part1 = ef
                ei.MaxVelocity = 0.01
                ei.C0 = CFrame.new(0, 2, 0) * CFrame.Angles(0, math.rad(90), 0)
                ei.C1 = CFrame.new(0, 1, 0.45) * CFrame.Angles(0, math.rad(90), 0)
                spawn(
                    function()
                        local ej = false
                        while eg.Parent == Q do
                            task.wait(1 / 60)
                            local bn = 0.1
                            local ek = ef.Velocity.Magnitude
                            if ej then
                                bn = bn + ef.Velocity.Magnitude / 10 * 0.05 + 0.05
                                ej = false
                            else
                                ej = true
                            end
                            bn = bn + math.min(ef.Velocity.Magnitude / 11, 0.5)
                            ei.MaxVelocity = math.min(ef.Velocity.Magnitude / 111, 0.04)
                            ei.DesiredAngle = -bn
                            if ei.CurrentAngle < -0.2 and ei.DesiredAngle > -0.2 then
                                ei.MaxVelocity = 0.04
                            end
                            repeat
                                task.wait()
                            until ei.CurrentAngle == ei.DesiredAngle or
                                math.abs(ef.Velocity.Magnitude - ek) >= ef.Velocity.Magnitude / 10 + 1
                            if ef.Velocity.Magnitude < 0.1 then
                                task.wait(0.1)
                            end
                        end
                    end
                )
            end
            local function el()
                local eg = Q:FindFirstChild("Cape")
                if eg then
                    eg:Destroy()
                end
            end
            if J then
                if not Q:FindFirstChild("Cape") then
                    ee()
                end
            else
                el()
            end
        end
    }
)
local em = {
    {Name = "Mouse", Value = "Mouse"},
    {Name = "Bottom Center", Value = "BottomCenter"},
    {Name = "Top Center", Value = "TopCenter"},
    {Name = "Left Center", Value = "LeftCenter"},
    {Name = "Right Center", Value = "RightCenter"}
}
local en = 1
C:AddDropdown(
    {
        Name = "Tracer Source",
        Default = em[en].Name,
        List = {em[1].Name, em[2].Name, em[3].Name, em[4].Name, em[5].Name},
        Callback = function(J)
            for eo, ep in ipairs(em) do
                if ep.Name == J then
                    en = eo
                    break
                end
            end
        end
    }
)
C:AddToggle(
    {
        Name = "Tracer",
        Value = false,
        Callback = function(a6)
            Tracer = a6
            local e = game:GetService("RunService")
            local b = game:GetService("Players")
            local eq = game:GetService("Workspace")
            local cP = game:GetService("UserInputService")
            local j = eq.CurrentCamera
            local settings = {
                DefaultSettings = false,
                TeamCheck = false,
                TracersVisible = true,
                TracerColor = Color3.fromRGB(128, 0, 128),
                TracerThickness = 1.8,
                TracerTransparency = 0.8
            }
            local er = {}
            local function es(Q)
                local et = Drawing.new("Line")
                et.Thickness = settings.TracerThickness
                et.Transparency = settings.TracerTransparency
                et.Visible = false
                et.Color = settings.TracerColor
                local function eu()
                    if not Q:IsDescendantOf(eq) or not Q:FindFirstChild("HumanoidRootPart") then
                        et.Visible = false
                        return
                    end
                    local ev = Q:FindFirstChild("Head") or Q:FindFirstChild("HumanoidRootPart")
                    if not ev then
                        et.Visible = false
                        return
                    end
                    local ew = ev.Position
                    local ex, ey = j:WorldToViewportPoint(ew)
                    local ez = em[en]
                    if ez.Value == "Mouse" then
                        et.From = Vector2.new(cP:GetMouseLocation().X, cP:GetMouseLocation().Y)
                    elseif ez.Value == "BottomCenter" then
                        et.From = Vector2.new(j.ViewportSize.X / 2, j.ViewportSize.Y)
                    elseif ez.Value == "TopCenter" then
                        et.From = Vector2.new(j.ViewportSize.X / 2, 0)
                    elseif ez.Value == "LeftCenter" then
                        et.From = Vector2.new(0, j.ViewportSize.Y / 2)
                    elseif ez.Value == "RightCenter" then
                        et.From = Vector2.new(j.ViewportSize.X, j.ViewportSize.Y / 2)
                    end
                    if ey then
                        et.To = Vector2.new(ex.X, ex.Y)
                        if settings.TeamCheck then
                            et.Visible = b.LocalPlayer.Team ~= Q.Team
                        else
                            et.Visible = Tracer
                        end
                    else
                        et.Visible = false
                    end
                end
                er[Q] = et
                return et, eu
            end
            local function eA(P, Q)
                if P == b.LocalPlayer then
                    return
                end
                if not Q or not Q:IsDescendantOf(eq) or not Q:FindFirstChild("HumanoidRootPart") then
                    return
                end
                local eB, eC = es(Q)
                e.RenderStepped:Connect(
                    function()
                        eC()
                    end
                )
                Q.AncestryChanged:Connect(
                    function()
                        if not Q:IsDescendantOf(eq) then
                            eB.Visible = false
                            er[Q] = nil
                        end
                    end
                )
            end
            b.PlayerAdded:Connect(
                function(P)
                    P.CharacterAdded:Connect(
                        function(Q)
                            eA(P, Q)
                        end
                    )
                end
            )
            for O, P in ipairs(b:GetPlayers()) do
                eA(P, P.Character)
            end
            cP.InputBegan:Connect(
                function(cf)
                    if cf.KeyCode == settings.ModeSkipKey and not cP:GetFocusedTextBox() then
                        en = en % #em + 1
                        for O, et in pairs(er) do
                            et.Visible = settings.TracersVisible and Tracer
                        end
                    elseif cf.KeyCode == settings.DisableKey and not cP:GetFocusedTextBox() then
                        settings.TracersVisible = not settings.TracersVisible
                        for O, et in pairs(er) do
                            et.Visible = settings.TracersVisible and Tracer
                        end
                    end
                end
            )
            if settings.DefaultSettings then
                settings.TeamCheck = false
                settings.TracersVisible = true
                settings.TracerColor = Color3.fromRGB(128, 0, 128)
                settings.TracerThickness = 1.8
                settings.TracerTransparency = 0.8
            end
        end
    }
)
local P, eD = game.Players.LocalPlayer, false
local function eE(Q)
    local ev = Q:FindFirstChild("Head")
    if ev then
        local eF = ev:FindFirstChild("face")
        if eF then
            eF:Destroy()
        end
    end
end
local function eG(aE)
    if aE:IsA("Accessory") or aE:IsA("Shirt") or aE:IsA("Pants") or aE.Name == "Face" then
        aE:Destroy()
    elseif aE:IsA("BasePart") then
        aE.Material = Enum.Material.ForceField
        aE.Color = Color3.fromRGB(225, 160, 255)
    end
end
local function eH(Q)
    eE(Q)
    for O, aE in ipairs(Q:GetChildren()) do
        eG(aE)
    end
    Q.ChildAdded:Connect(eG)
end
local function eI(Q)
    task.wait(0.14)
    if eD then
        eH(Q)
    end
end
C:AddToggle(
    {Name = "Self visual", Value = false, Callback = function(dp)
            eD = dp
            if dp then
                eI(P.Character or P.CharacterAdded:Wait())
            end
        end}
)
P.CharacterAdded:Connect(eI)
