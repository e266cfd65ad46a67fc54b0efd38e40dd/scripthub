local a =
    loadstring(
    game:HttpGet("https://raw.githubusercontent.com/e266cfd65ad46a67fc54b0efd38e40dd/libs/main/pep/main.lua", true)
)()
a.UnloadCallback = function()
    getgenv().EightBall = nil
end
local b = game:GetService("Players")
local c = game:GetService("StarterGui")
local d = game:GetService("TweenService")
local e = game:GetService("RunService")
local f = game:GetService("ReplicatedStorage")
local g = game.Players.LocalPlayer
local h = f.Packages.Knit.Services.ToolService.RF
local i = g:GetMouse()
local j = workspace.CurrentCamera
local k = game.Players.LocalPlayer.Character.Humanoid.Health
local function l(m, n)
    h.ToggleBlockSword:InvokeServer(m, n)
end
local o = a:CreateWindow({Name = "EightBall", Themeable = {Image = "7059346386", Credit = false}})
local p = o:CreateTab({Name = "Blatant"})
local q = p:CreateSection({Name = "Aura"})
local r = p:CreateSection({Name = "Bow Aura"})
local s = p:CreateSection({Name = "Movement", Side = "Right"})
local t = p:CreateSection({Name = "Strafe", Side = "Right"})
local u = p:CreateSection({Name = "Anti void", Side = "Right"})
local v = p:CreateSection({Name = "Anti lagback [beta]"})
local w = o:CreateTab({Name = "Closet"})
local x = w:CreateSection({Name = "Hitbox", Side = "Right"})
local y = w:CreateSection({Name = "Auto"})
local z = w:CreateSection({Name = "Lag", Side = "Right"})
local A = w:CreateSection({Name = "Aim"})
local B = o:CreateTab({Name = "Visuals"})
local C = B:CreateSection({Name = "chams"})
local D = B:CreateSection({Name = "Target hud"})
local E = B:CreateSection({Name = "Render", Side = "Right"})
local F, G, H, I = "Closest", "PreSimulation", false, 24
local J = game:GetService("Players")
local g = J.LocalPlayer
q:AddDropdown(
    {
        Name = "RunService type",
        Default = "PreSimulation",
        List = {"Stepped", "PreSimulation", "Heartbeat", "RenderStepped", "PreRender", "PostSimulation"},
        Callback = function(K)
            G = K
        end
    }
)
local function L()
    local M = J:GetPlayers()
    local N = nil
    local O = math.huge
    local P = g.Character and g.Character.HumanoidRootPart.Position
    if not P then
        return nil
    end
    for Q, R in ipairs(M) do
        local S = R.Character
        if S and S:FindFirstChild("Humanoid") and S.Humanoid.Health > 0 and not S:FindFirstChildOfClass("ForceField") then
            local T = (S.HumanoidRootPart.Position - P).magnitude
            if T < O then
                O = T
                N = S.HumanoidRootPart.Position
            end
        end
    end
    return N
end
local function U(R)
    return R ~= g and R.Character and R.Character:FindFirstChild("HumanoidRootPart") and
        R.Character:FindFirstChild("Humanoid").Health > 0 and
        not R.Character:FindFirstChildOfClass("ForceField")
end
local function V(W)
    local X = nil
    local P = g.Character and g.Character.HumanoidRootPart.Position
    if not P then
        return nil
    end
    local M = J:GetPlayers()
    if W == "Closest" then
        local T = math.huge
        for Q, Y in ipairs(M) do
            if U(Y) then
                local Z = (P - Y.Character.HumanoidRootPart.Position).Magnitude
                if Z < T then
                    X, T = Y, Z
                end
            end
        end
    elseif W == "Random" then
        local _ = {}
        for Q, Y in ipairs(M) do
            if U(Y) and (P - Y.Character.HumanoidRootPart.Position).Magnitude <= I then
                table.insert(_, Y)
            end
        end
        if #_ > 0 then
            X = _[math.random(1, #_)]
        end
    elseif W == "Farthest" then
        local a0 = 0
        for Q, Y in ipairs(M) do
            if U(Y) then
                local Z = (P - Y.Character.HumanoidRootPart.Position).Magnitude
                if Z > a0 and Z <= I then
                    X, a0 = Y, Z
                end
            end
        end
    elseif W == "Weakest" then
        local a1 = math.huge
        for Q, Y in ipairs(M) do
            if U(Y) then
                local Z = (P - Y.Character.HumanoidRootPart.Position).Magnitude
                if Z <= I and Y.Character.Humanoid.Health < a1 then
                    X, a1 = Y, Y.Character.Humanoid.Health
                end
            end
        end
    elseif W == "Strongest" then
        local a2 = 0
        for Q, Y in ipairs(M) do
            if U(Y) then
                local Z = (P - Y.Character.HumanoidRootPart.Position).Magnitude
                if Z <= I and Y.Character.Humanoid.Health > a2 then
                    X, a2 = Y, Y.Character.Humanoid.Health
                end
            end
        end
    end
    return X
end
q:AddDropdown(
    {
        Name = "Targeting Mode",
        Default = "Closest",
        List = {"Closest", "Farthest", "Strongest", "Weakest", "Random"},
        Callback = function(K)
            F = K
        end
    }
)
local function a3()
    local a4 = V(F)
    if a4 then
        local Z = (g.Character.HumanoidRootPart.Position - a4.Character.HumanoidRootPart.Position).Magnitude
        if Z <= I and a4.Character.Humanoid.Health > 0 and not a4.Character:FindFirstChildOfClass("ForceField") then
            if H then
                for Q, a5 in ipairs({"WoodenSword", "Sword"}) do
                    l(true, a5)
                end
            end
            for Q, n in ipairs({"WoodenSword", "Sword"}) do
                h.AttackPlayerWithSword:InvokeServer(a4.Character, critsActive, n)
            end
        else
            if H then
                for Q, a5 in ipairs({"WoodenSword", "Sword"}) do
                    l(false, a5)
                end
            end
        end
    end
end
local a6
local function a7(a8)
    if a8 then
        if not a6 then
            a6 =
                game:GetService("RunService")[G]:Connect(
                function()
                    pcall(a3)
                end
            )
        end
    elseif a6 then
        a6:Disconnect()
        a6 = nil
    end
end
q:AddToggle({Name = "Aura", Default = false, Keybind = 1, Callback = a7})
q:AddToggle(
    {Name = "Auto block", Default = false, Callback = function(a8)
            H = a8
        end}
)
q:AddToggle(
    {Name = "Crits", Default = false, Callback = function(a8)
            critsActive = a8
        end}
)
q:AddSlider(
    {Name = "Aura Range", Min = 1, Max = 36, Default = 24, Callback = function(K)
            I = K
        end}
)
local a9
q:AddToggle(
    {
        Name = "Click Aura",
        Default = false,
        Keybind = 1,
        Callback = function(aa)
            local R = game.Players.LocalPlayer
            local i = R:GetMouse()
            local function ab(R)
                local ac, ad = nil, math.huge
                for Q, ae in pairs(game.Players:GetPlayers()) do
                    if ae ~= R and ae.Character and ae.Character:FindFirstChild("HumanoidRootPart") then
                        local T =
                            (R.Character.HumanoidRootPart.Position - ae.Character.HumanoidRootPart.Position).Magnitude
                        if T < ad then
                            ad, ac = T, ae
                        end
                    end
                end
                return ac
            end
            local function af()
                local ac = ab(R)
                if ac and ac.Character then
                    local ag = {"WoodenSword", "Sword"}
                    for Q, n in ipairs(ag) do
                        local ah = {[1] = workspace:WaitForChild(ac.Name), [2] = true, [3] = n}
                        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild(
                            "Services"
                        ):WaitForChild("ToolService"):WaitForChild("RF"):WaitForChild("AttackPlayerWithSword"):InvokeServer(
                            unpack(ah)
                        )
                    end
                end
            end
            if aa then
                a9 = i.Button1Down:Connect(af)
            else
                if a9 then
                    a9:Disconnect()
                    a9 = nil
                end
            end
        end
    }
)
local function ai()
    if FaceTarget then
        local aj = L()
        task.wait(0.05)
        local ah = {[1] = Vector3.new(aj.X, aj.Y, aj.Z)}
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild(
            "ToolService"
        ):WaitForChild("RF"):WaitForChild("UpdateHeadRotation"):InvokeServer(unpack(ah))
    end
end
game:GetService("RunService").Heartbeat:Connect(ai)
q:AddToggle(
    {Name = "Serverside Face", Default = false, Callback = function(a8)
            FaceTarget = a8
        end}
)
local ak, al, am, an, a8 = "Head", 30, 1, 0.1, false
local ao = 0
local ap = 3
local function aq(ar)
    local as = game.Players.LocalPlayer:WaitForChild("Backpack"):FindFirstChild(ar)
    as.Parent = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
end
local function at(ar)
    local as = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait():FindFirstChild(ar)
    as.Parent = game.Players.LocalPlayer:WaitForChild("Backpack")
end
local function au(av, aw, ax, am)
    return av + aw * ax + Vector3.new(0, am, 0)
end
local function ay(az, aA)
    local aB = Ray.new(az, (aA - az).unit * (aA - az).magnitude)
    local aC, aD = workspace:FindPartOnRay(aB, game.Players.LocalPlayer.Character, false, true)
    return aC == nil
end
r:AddDropdown(
    {
        Name = "Target Part",
        List = {
            "Head",
            "HumanoidRootPart",
            "LeftLowerArm",
            "RightLowerArm",
            "LeftUpperArm",
            "RightUpperArm",
            "LeftLowerLeg",
            "UpperTorso",
            "LeftUpperLeg",
            "RightLowerLeg",
            "LowerTorso",
            "RightUpperLeg"
        },
        Default = ak,
        Callback = function(aE)
            ak = aE
        end
    }
)
r:AddSlider(
    {Name = "Charge time", Min = 0, Max = 50, Default = al, Callback = function(K)
            al = K
        end}
)
r:AddSlider(
    {Name = "Y Offset", Min = -15, Max = 15, Default = am, Callback = function(K)
            am = K
        end}
)
r:AddSlider(
    {Name = "Prediction", Min = 0, Max = 3.0, Default = an, Precise = 1, Callback = function(K)
            an = K
        end}
)
r:AddToggle(
    {
        Name = "Bow Aura",
        Callback = function(aF)
            a8 = aF
            if a8 then
                local aG = game.Players.LocalPlayer
                local function aH()
                    local aI = game:GetService("RunService")
                    local a9
                    a9 =
                        aI.RenderStepped:Connect(
                        function()
                            if not a8 then
                                a9:Disconnect()
                                return
                            end
                            if tick() - ao < ap then
                                return
                            end
                            local S = aG.Character or aG.CharacterAdded:Wait()
                            local aJ = S:FindFirstChild(ak)
                            local aK = aJ and aJ.Position
                            if not aK then
                                return
                            end
                            local ac, ad, aL
                            for Q, R in ipairs(game.Players:GetPlayers()) do
                                if R ~= aG and R.Character then
                                    local aM = R.Character:FindFirstChild(ak)
                                    local av = aM and aM.Position
                                    local aN = R.Character.HumanoidRootPart.Velocity
                                    if av then
                                        local T = (av - aK).magnitude
                                        local aO = au(av, aN, an, am)
                                        local aP = (aO - aK).magnitude
                                        if not ad or aP < ad then
                                            if ay(aK, aO) then
                                                ac = R
                                                ad = aP
                                                aL = aO
                                            end
                                        end
                                    end
                                end
                            end
                            if ac and aL then
                                aq("DefaultBow")
                                game.Players.LocalPlayer.Character.DefaultBow.__comm__.RF.Fire:InvokeServer(aL, al)
                                at("DefaultBow")
                                ao = tick()
                            end
                        end
                    )
                end
                aH()
            end
        end
    }
)
local a8 = false
local aQ = 10
local aR = 20
local aS = 0.3
local aT = 0.001
local a9
local aU = false
local function aV(aW)
    aT = aT + aW
    if aT < aS then
        return
    end
    aT = 0
    local b = game:GetService("Players")
    local R = b.LocalPlayer
    local S = R.Character
    if not S then
        return
    end
    local aX = S:FindFirstChild("Humanoid")
    if not aX then
        return
    end
    local aY = S:FindFirstChild("HumanoidRootPart")
    if not aY then
        return
    end
    local aZ = aY.CFrame
    local T = (aZ.Position - lastValidPosition.Position).Magnitude
    if T > aQ and T < aR then
        local aN = aX.MoveDirection * aX.WalkSpeed
        local a_ = lastValidPosition.Position + aN * aS
        if (aZ.Position - a_).Magnitude > aQ then
            S:SetPrimaryPartCFrame(lastValidPosition)
        else
            lastValidPosition = aZ
        end
    else
        lastValidPosition = aZ
    end
    if aU then
        local b0 = aY.Position
        local b1 = lastValidPosition.Position
        local b2 = (b0 - b1).Magnitude
        if b2 > aR then
            local b3 = (b0 - b1).unit
            aY.CFrame = CFrame.new(b1 + b3 * aR)
        end
    end
end
v:AddToggle(
    {Name = "Anti lagback", Default = false, Callback = function(aF)
            a8 = aF
            if a8 then
                local b = game:GetService("Players")
                local e = game:GetService("RunService")
                local R = b.LocalPlayer
                local S = R.Character or R.CharacterAdded:Wait()
                lastValidPosition = S.PrimaryPart.CFrame
                a9 = e.Heartbeat:Connect(aV)
            else
                if a9 then
                    a9:Disconnect()
                    a9 = nil
                end
            end
        end}
)
v:AddToggle(
    {Name = "Area Lock", Default = false, Callback = function(b4)
            aU = b4
        end}
)
v:AddSlider(
    {
        Name = "Lag Back Threshold",
        Min = 0,
        Max = 30,
        Default = aQ,
        Increment = 0.1,
        ValueName = "studs",
        Callback = function(K)
            aQ = K
        end
    }
)
v:AddSlider(
    {
        Name = "Max Prevention Distance",
        Min = 0,
        Max = 50,
        Default = aR,
        Increment = 0.1,
        ValueName = "studs",
        Callback = function(K)
            aR = K
        end
    }
)
v:AddSlider(
    {
        Name = "Update Delay",
        Min = 0,
        Max = 1,
        Default = aS,
        Increment = 0.01,
        ValueName = "seconds",
        Callback = function(K)
            aS = K
        end
    }
)
local b5, b6, b7, b8, b9, a9 = 1.0, false, false, 1.0 / 200, false, false
local function ba()
    if b7 then
        b9 = true
        if a9 then
            a9:Disconnect()
        end
        a9 =
            game:GetService("RunService").Stepped:Connect(
            function()
                if not b9 then
                    return
                end
                local bb = b8
                if b6 and game.Players.LocalPlayer:GetAttribute("Blocking") == true then
                    bb = bb * b5
                end
                local S = game.Players.LocalPlayer.Character
                if S and S:FindFirstChild("HumanoidRootPart") then
                    S.HumanoidRootPart.CFrame = S.HumanoidRootPart.CFrame + S.Humanoid.MoveDirection * bb
                end
            end
        )
    else
        b9 = false
        if a9 then
            a9:Disconnect()
        end
    end
end
s:AddSlider(
    {Name = "Block Speed", Min = 1, Max = 2.20, Value = b5, Precise = 2, Callback = function(K)
            b5 = K
        end}
)
s:AddToggle(
    {Name = "Block Noslow", Value = b6, Callback = function(bc)
            b6 = bc
        end}
)
s:AddToggle(
    {Name = "Speed", Value = b7, Keybind = 1, Callback = function(bc)
            b7 = bc
            ba()
        end}
)
s:AddSlider(
    {Name = "Movement Speed", Min = 0, Max = 50, Value = b8 * 200, Callback = function(K)
            b8 = K / 200
            if b7 then
                ba()
            end
        end}
)
game.Players.LocalPlayer.CharacterAdded:Connect(
    function()
        ba()
    end
)
s:AddSlider(
    {Name = "Gravity", Min = 0, Max = 192, Callback = function(bd, be)
            workspace.Gravity = bd
        end}
)
local bf, bg, bh = {}, nil, false
local function bi()
    for Q, aJ in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        if aJ:IsA("BasePart") and aJ.CanCollide then
            bf[aJ] = true
            aJ.CanCollide = false
        end
    end
end
s:AddToggle(
    {Name = "Phase", Value = bh, Keybind = 1, Callback = function(a8)
            bh = a8
            if a8 then
                bg = game:GetService("RunService").Stepped:Connect(bi)
            else
                if bg then
                    bg:Disconnect()
                end
                for aJ in pairs(bf) do
                    if aJ then
                        aJ.CanCollide = true
                    end
                end
                table.clear(bf)
            end
        end}
)
local bj, bk = false, 0.80
s:AddToggle(
    {Name = "Air Check", Value = bj, Callback = function(a8)
            bj = a8
        end}
)
s:AddToggle(
    {Name = "Bhop", Value = BhopActive, Keybind = 1, Callback = function(a8)
            BhopActive = a8
            if a8 then
                while a8 do
                    if
                        not bj or
                            game.Players.LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall
                     then
                        game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):ChangeState(
                            Enum.HumanoidStateType.Jumping
                        )
                        task.wait(bk)
                    end
                    if not BhopActive then
                        break
                    end
                    task.wait()
                end
            end
        end}
)
s:AddSlider(
    {Name = "Bhop delay", Min = 0, Max = 1, Precise = 2, Value = bk, Callback = function(bd, be)
            bk = bd
        end}
)
local bl = false
local bm = 0
s:AddToggle(
    {
        Name = "Derp",
        Default = false,
        Callback = function(bn)
            bl = bn
            if bl then
                local M = game:GetService("Players")
                local bo = game:GetService("TweenService")
                local aI = game:GetService("RunService")
                local function bp(S)
                    local bq = S:WaitForChild("HumanoidRootPart")
                    local br = 0.01
                    local bs = 0
                    local function bt(aW)
                        bs = (bs + bm * aW) % (2 * math.pi)
                        local bu = math.cos(bs) * br
                        local bv = math.sin(bs) * br
                        local bw = CFrame.new(bq.Position) * CFrame.Angles(0, bs, 0)
                        local bx = TweenInfo.new(-1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
                        local by = bo:Create(bq, bx, {CFrame = bw})
                        by:Play()
                    end
                    local bz
                    bz =
                        aI.Heartbeat:Connect(
                        function(aW)
                            if bl then
                                bt(aW)
                            else
                                bz:Disconnect()
                            end
                        end
                    )
                end
                local aG = M.LocalPlayer
                local S = aG.Character or aG.CharacterAdded:Wait()
                bp(S)
                aG.CharacterAdded:Connect(
                    function(bA)
                        if bl then
                            bp(bA)
                        end
                    end
                )
            end
        end
    }
)
s:AddSlider(
    {Name = "Derp spin speed", Min = 0, Max = 50, Precise = 2, Default = bm, Callback = function(bB)
            bm = bB
        end}
)
local bC = false
local bD
local function bt(S)
    if S:FindFirstChild("HumanoidRootPart") then
        local bE = S.HumanoidRootPart.Position
        local am = S.Humanoid.HipHeight - -1
        bD.Position = Vector3.new(bE.X, bE.Y - am, bE.Z)
    end
end
s:AddToggle(
    {Name = "Fly", Value = bC, Keybind = 1, Callback = function(a8)
            bC = a8
            local R = game.Players.LocalPlayer
            local S = R.Character or R.CharacterAdded:Wait()
            if a8 then
                bD = Instance.new("Part")
                bD.Size = Vector3.new(2, 0.1, 2)
                bD.Anchored = true
                bD.CanCollide = true
                bD.Transparency = 1
                bD.BrickColor = BrickColor.new("Medium stone grey")
                bD.Parent = game.Workspace
                while bC do
                    bt(S)
                    task.wait()
                end
            else
                if bD then
                    bD:Destroy()
                end
            end
        end}
)
local bF, bG = false, 0.02
local function bH(bI, bJ, bK)
    local bL, bM, bN = math.clamp, Vector3.new, tick()
    local bO = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if bO then
        bO.Anchored = true
    end
    while tick() - bN <= bG do
        if bO then
            bO.Velocity = bM(bL(bO.Velocity.X, -bI, bI), bL(bO.Velocity.Y, -bJ, bJ), bL(bO.Velocity.Z, -bK, bK))
        end
        task.wait()
    end
    if bO then
        bO.Anchored = false
    end
end
local function bP(bQ)
    if bF and k and bQ < k then
        bH(0, 0, 0)
    end
    k = bQ
end
local function bR()
    while bF do
        bP(game.Players.LocalPlayer.Character.Humanoid.Health)
        task.wait(0.03)
    end
end
game.Players.LocalPlayer.Character.Humanoid.HealthChanged:Connect(bP)
s:AddToggle(
    {Name = "Antikb", Default = false, Callback = function(K)
            bF = K
            if bF then
                spawn(bR)
            end
        end}
)
s:AddSlider(
    {Name = "Anti kb no-move", Min = 0, Max = 1, Precise = 2, Default = 0.02, Callback = function(K)
            bG = K
        end}
)
local bS = false
local bT = 20
local bU = 20
local bV = false
local bW, bX, bY
local function bZ()
    local ad, b_ = math.huge, nil
    local R = game.Players.LocalPlayer
    local S = R.Character or R.CharacterAdded:Wait()
    for Q, ae in pairs(game:GetService("Players"):GetPlayers()) do
        local c0 = ae.Character
        local c1 = c0 and c0:FindFirstChild("HumanoidRootPart")
        if ae ~= R and c1 and c0.Humanoid.Health > 0 then
            local T = (S.HumanoidRootPart.Position - c1.Position).magnitude
            if T < ad and T <= bU then
                ad, b_ = T, ae
            end
        end
    end
    return b_
end
local function bt()
    local R = game.Players.LocalPlayer
    local S = R.Character
    local bq = S and S:FindFirstChild("HumanoidRootPart")
    if bq and bW and bW.Character then
        local c2 = bW.Character:FindFirstChild("HumanoidRootPart")
        if c2 and bW.Character.Humanoid.Health > 0 then
            local av = c2.Position
            if (bq.Position - av).magnitude <= bU then
                task.wait(0.0195)
                if bW ~= bX then
                    if R:GetAttribute("Blocking") == true then
                        R:SetAttribute("Blocking", false)
                        task.wait(0.068)
                        if bV then
                            local b3 = (av - bq.Position).unit
                            bq.CFrame = CFrame.new(bq.Position + b3 * bT * 0.0195)
                        else
                            bq.CFrame = CFrame.new(bq.Position):lerp(CFrame.new(av), bT * 0.01)
                        end
                        R:SetAttribute("Blocking", true)
                    else
                        if bV then
                            local b3 = (av - bq.Position).unit
                            bq.CFrame = CFrame.new(bq.Position + b3 * bT * 0.0195)
                        else
                            bq.CFrame = CFrame.new(bq.Position):lerp(CFrame.new(av), bT * 0.01)
                        end
                    end
                    bX = bW
                else
                    if bV then
                        local b3 = (av - bq.Position).unit
                        bq.CFrame = CFrame.new(bq.Position + b3 * bT * 0.0195)
                    else
                        bq.CFrame = CFrame.new(bq.Position):lerp(CFrame.new(av), bT * 0.01)
                    end
                end
            else
                bW = nil
            end
        else
            bW = nil
        end
    else
        bW = bZ()
    end
end
t:AddToggle(
    {Name = "Strafe", Keybind = 1, Default = false, Callback = function(K)
            bS = K
            if K then
                bY = game:GetService("RunService").RenderStepped:Connect(bt)
            elseif bY then
                bY:Disconnect()
                bY = nil
            end
        end}
)
t:AddSlider(
    {Name = "Follow Speed", Min = 0, Max = 30, Precise = 2, Value = bT, Callback = function(bd)
            bT = bd
        end}
)
t:AddSlider(
    {Name = "Max Target Distance", Min = 1, Max = 100, Value = bU, Callback = function(bd)
            bU = bd
        end}
)
t:AddToggle(
    {Name = "Linear", Default = false, Callback = function(K)
            bV = K
        end}
)
local c3
u:AddToggle(
    {Name = "Antivoid", Value = false, Callback = function(a8)
            if a8 then
                c3 = Instance.new("Part")
                c3.Name = "Antivoid"
                c3.Position = Vector3.new(0, -150, 0)
                c3.Size = Vector3.new(1000, 1, 1000)
                c3.Anchored = true
                c3.CanCollide = true
                c3.Transparency = 1
                c3.BrickColor = BrickColor.new("Medium stone grey")
                c3.Parent = game.Workspace
            else
                local c4 = game.Workspace:FindFirstChild("Antivoid")
                if c4 then
                    c4:Destroy()
                end
            end
        end}
)
u:AddSlider(
    {Name = "Antivoid Transparency", Value = 0, Min = 0, Max = 1, Precise = 1, Callback = function(c5)
            if c3 then
                c3.Transparency = c5
            end
        end}
)
local c6, c7, c8, c9, ca, cb, cc, cd = 1, 1, 1, false, nil, 0.5, Enum.Material.Neon, Color3.fromRGB(225, 160, 255)
x:AddSlider(
    {Name = "X axis", Min = 1, Max = 10, Callback = function(K)
            c6 = K
        end}
)
x:AddSlider(
    {Name = "Y axis", Min = 1, Max = 10, Callback = function(K)
            c7 = K
        end}
)
x:AddSlider(
    {Name = "Z axis", Min = 1, Max = 10, Callback = function(K)
            c8 = K
        end}
)
x:AddSlider(
    {Name = "Transparency", Min = 0, Max = 1, Callback = function(K)
            cb = K
        end}
)
x:AddDropdown(
    {
        Name = "Material",
        List = {"Plastic", "SmoothPlastic", "Neon", "ForceField", "Glass"},
        Default = "Neon",
        Callback = function(aE)
            if aE == "Plastic" then
                cc = Enum.Material.Plastic
            elseif aE == "SmoothPlastic" then
                cc = Enum.Material.SmoothPlastic
            elseif aE == "Neon" then
                cc = Enum.Material.Neon
            elseif aE == "ForceField" then
                cc = Enum.Material.ForceField
            elseif aE == "Glass" then
                cc = Enum.Material.Glass
            end
        end
    }
)
x:AddColorPicker(
    {Name = "Color", Default = cd, Callback = function(ce)
            cd = ce
        end}
)
x:AddToggle(
    {Name = "Hitbox Visual", Callback = function(a8)
            c9 = a8
        end}
)
x:AddToggle(
    {
        Name = "Hitbox",
        Callback = function(a8)
            if a8 then
                local function cf()
                    ca =
                        game:GetService("RunService").RenderStepped:Connect(
                        function()
                            for Q, R in ipairs(game:GetService("Players"):GetPlayers()) do
                                if R.Name ~= game:GetService("Players").LocalPlayer.Name then
                                    pcall(
                                        function()
                                            local bq = R.Character and R.Character:FindFirstChild("HumanoidRootPart")
                                            if bq then
                                                bq.Size = Vector3.new(c6, c7, c8)
                                                bq.Transparency = c9 and cb or 1
                                                bq.Material = cc
                                                bq.Color = cd
                                                bq.CanCollide = false
                                            end
                                        end
                                    )
                                end
                            end
                        end
                    )
                end
                cf()
            else
                if ca then
                    ca:Disconnect()
                    ca = nil
                end
                for Q, R in ipairs(game:GetService("Players"):GetPlayers()) do
                    if R.Name ~= game:GetService("Players").LocalPlayer.Name then
                        pcall(
                            function()
                                local bq = R.Character and R.Character:FindFirstChild("HumanoidRootPart")
                                if bq then
                                    bq.Size = Vector3.new(2, 2, 2)
                                    bq.Transparency = 1
                                    bq.Material = Enum.Material.Plastic
                                    bq.CanCollide = false
                                end
                            end
                        )
                    end
                end
            end
        end
    }
)
local cg, ch, ci = false, false, 18
y:AddToggle(
    {Name = "Auto Clicker", Keybind = 1, Callback = function(a8)
            cg = a8
            if a8 then
                ch = true
                while cg and ch do
                    mouse1click()
                    task.wait(1 / ci)
                end
            else
                ch = false
            end
        end}
)
y:AddSlider(
    {Name = "CPS", Min = 1, Max = 50, Def = ci, Callback = function(c5)
            ci = c5
        end}
)
local cj, i, ck, cl = game:GetService("UserInputService"), game.Players.LocalPlayer:GetMouse(), false, false
local a9
y:AddToggle(
    {
        Name = "Double click",
        Callback = function(a8)
            cl = a8
            if a8 then
                a9 =
                    cj.InputBegan:Connect(
                    function(cm, cn)
                        if not cn and cm.UserInputType == Enum.UserInputType.MouseButton1 and not ck then
                            task.wait(0.1)
                            ck = true
                            mouse1click()
                            ck = false
                        end
                    end
                )
            elseif a9 then
                a9:Disconnect()
            end
        end
    }
)
y:AddToggle(
    {
        Name = "Trigger bot",
        Keybind = 1,
        Callback = function(a8)
            triggerbotActive = a8
            local co
            local cp = 0
            local minInterval = 1 / cpslimit
            local function cq(cr)
                for Q, R in pairs(game.Players:GetPlayers()) do
                    if R.Character and cr and cr:IsDescendantOf(R.Character) then
                        return true
                    end
                end
                return false
            end
            if a8 then
                co =
                    game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if cq(game.Players.LocalPlayer:GetMouse().Target) then
                            local cs = tick()
                            if cs - cp >= minInterval then
                                cp = cs
                                mouse1press()
                                task.wait()
                                mouse1release()
                            end
                        end
                    end
                )
                getgenv().disable = function()
                    if co then
                        warn("Disconnecting:", co)
                        co:Disconnect()
                        co = nil
                    end
                    getgenv().disable = nil
                end
            else
                if getgenv().disable then
                    getgenv().disable()
                end
            end
        end
    }
)
y:AddSlider(
    {Name = "CPS limit", Min = 1, Max = 50, Def = cpslimit, Callback = function(c5)
            cpslimit = c5
            minInterval = 1 / cpslimit
        end}
)
local ct, cu, cv, cw, ak = false, 1, 30, 30, "Head"
local function cx(cy, cz, cA, cB)
    return cy:Lerp(cz, cA * cB)
end
local function cC(aW)
    if ct then
        local cD = nil
        local O = math.huge
        local aG = game:GetService("Players").LocalPlayer
        local cE = aG.Character
        if cE then
            local cF = cE:FindFirstChild(ak).Position
            local cG = cE:FindFirstChild(ak).CFrame.lookVector
            for Q, R in ipairs(game:GetService("Players"):GetPlayers()) do
                if R ~= aG then
                    local cH = R.Character
                    if cH then
                        local cI = cH:FindFirstChild(ak) and cH:FindFirstChild(ak).Position
                        if cI then
                            local T = (cF - cI).magnitude
                            if T < O and T <= cv then
                                local cJ = (cI - cF).unit
                                local bs = math.acos(cG:Dot(cJ)) * 180 / math.pi
                                if bs <= cw then
                                    O = T
                                    cD = R
                                end
                            end
                        end
                    end
                end
            end
        end
        if cD then
            local cK = game:GetService("Workspace").CurrentCamera.CFrame
            local cL = cD.Character:FindFirstChild(ak) and cD.Character:FindFirstChild(ak).Position
            if cL then
                local cM = CFrame.new(cK.Position, cL)
                local cN = cx(cK, cM, aW, cu)
                game:GetService("Workspace").CurrentCamera.CFrame = cN
            end
        end
    end
end
A:AddToggle(
    {Name = "Aim Assist", Keybind = 1, Callback = function(a8)
            ct = a8
        end}
)
A:AddDropdown(
    {
        Name = "Target Part",
        List = {
            "Head",
            "HumanoidRootPart",
            "LeftLowerArm",
            "RightLowerArm",
            "LeftUpperArm",
            "RightUpperArm",
            "LeftLowerLeg",
            "UpperTorso",
            "LeftUpperLeg",
            "RightLowerLeg",
            "LowerTorso",
            "RightUpperLeg"
        },
        Default = ak,
        Callback = function(aE)
            ak = aE
        end
    }
)
A:AddSlider(
    {Name = "Smoothness", Min = 1, Max = 25, Default = 1, Precise = 2, Callback = function(K)
            cu = K
        end}
)
A:AddSlider(
    {Name = "Range", Min = 5, Max = 100, Default = 30, Callback = function(K)
            cv = K
        end}
)
A:AddSlider(
    {Name = "Aim fov", Min = 0, Max = 360, Default = 30, Callback = function(K)
            cw = K
        end}
)
game:GetService("RunService").RenderStepped:Connect(
    function(aW)
        cC(aW)
    end
)
local cO = 40
D:AddSlider(
    {Name = "Hide distance", Min = 0, Max = 250, Value = cO, Callback = function(K)
            cO = K
        end}
)
D:AddToggle(
    {
        Name = "Target Hud",
        Callback = function(a8)
            if a8 then
                local b = game:GetService("Players")
                local e = game:GetService("RunService")
                local d = game:GetService("TweenService")
                local cP = game:GetService("UserInputService")
                local g = b.LocalPlayer
                local function cQ(cR, cS, cT)
                    local cU = Instance.new(cR)
                    for cV, K in pairs(cS) do
                        cU[cV] = K
                    end
                    cU.Parent = cT
                    return cU
                end
                local function cW(cX)
                    local cY = workspace.CurrentCamera.ViewportSize
                    local cZ = cX.Size
                    cX.Position = UDim2.new(0.5, -cZ.X.Offset / 2, 0.5, -cZ.Y.Offset / 2)
                end
                local c_ = cQ("ScreenGui", {Name = "TargetHUD"}, g.PlayerGui)
                local d0 =
                    cQ(
                    "Frame",
                    {
                        Size = UDim2.new(0, 280, 0, 130),
                        BackgroundColor3 = Color3.new(0.1, 0.1, 0.1),
                        BorderSizePixel = 0,
                        Draggable = true
                    },
                    c_
                )
                cQ("UICorner", {CornerRadius = UDim.new(0, 10)}, d0)
                local d1 =
                    cQ(
                    "TextLabel",
                    {
                        Size = UDim2.new(1, 0, 0, 35),
                        Position = UDim2.new(0, 0, 0, 5),
                        BackgroundTransparency = 1,
                        TextColor3 = Color3.new(1, 1, 1),
                        TextSize = 22,
                        Font = Enum.Font.SourceSansBold
                    },
                    d0
                )
                local d2 =
                    cQ(
                    "Frame",
                    {
                        Size = UDim2.new(0.92, 0, 0, 20),
                        Position = UDim2.new(0.04, 0, 0.38, 0),
                        BackgroundColor3 = Color3.new(0.2, 0.2, 0.2),
                        BorderSizePixel = 0
                    },
                    d0
                )
                cQ("UICorner", {CornerRadius = UDim.new(0, 4)}, d2)
                local d3 =
                    cQ(
                    "Frame",
                    {Size = UDim2.new(1, 0, 1, 0), BackgroundColor3 = Color3.new(1, 1, 1), BorderSizePixel = 0},
                    d2
                )
                cQ("UICorner", {CornerRadius = UDim.new(0, 4)}, d3)
                local d4 =
                    cQ(
                    "TextLabel",
                    {
                        Size = UDim2.new(1, 0, 1, 0),
                        BackgroundTransparency = 1,
                        TextColor3 = Color3.new(0, 0, 0),
                        TextSize = 18,
                        Font = Enum.Font.SourceSansBold
                    },
                    d2
                )
                local d5 =
                    cQ(
                    "TextLabel",
                    {
                        Size = UDim2.new(0, 110, 0, 25),
                        Position = UDim2.new(0, 10, 1, -30),
                        BackgroundTransparency = 0.5,
                        BackgroundColor3 = Color3.new(0, 0.5, 1),
                        TextColor3 = Color3.new(1, 1, 1),
                        TextSize = 16,
                        Font = Enum.Font.SourceSansBold,
                        TextXAlignment = Enum.TextXAlignment.Center
                    },
                    d0
                )
                cQ("UICorner", {CornerRadius = UDim.new(0, 5)}, d5)
                local d6 =
                    cQ(
                    "TextLabel",
                    {
                        Size = UDim2.new(0, 110, 0, 25),
                        Position = UDim2.new(1, -120, 1, -30),
                        BackgroundTransparency = 0.5,
                        BackgroundColor3 = Color3.new(0.2, 0.2, 0.2),
                        TextColor3 = Color3.new(1, 1, 1),
                        TextSize = 16,
                        Font = Enum.Font.SourceSansBold,
                        TextXAlignment = Enum.TextXAlignment.Center
                    },
                    d0
                )
                cQ("UICorner", {CornerRadius = UDim.new(0, 5)}, d6)
                cW(d0)
                local d7 = false
                local d8 = nil
                local d9 = nil
                local da = d0.Position
                local db = nil
                local function dc(cm)
                    d7 = true
                    d8 = cm.Position
                    d9 = d0.Position
                    if db then
                        db:Cancel()
                    end
                end
                local function dd(cm)
                    if d7 then
                        local de = cm.Position - d8
                        local df = UDim2.new(d9.X.Scale, d9.X.Offset + de.X, d9.Y.Scale, d9.Y.Offset + de.Y)
                        d0.Position = df
                    end
                end
                local function dg()
                    d7 = false
                    local df = d0.Position
                    db = d:Create(d0, TweenInfo.new(0.3), {Position = df})
                    db:Play()
                end
                d0.InputBegan:Connect(
                    function(cm)
                        if cm.UserInputType == Enum.UserInputType.MouseButton1 then
                            dc(cm)
                        end
                    end
                )
                cP.InputChanged:Connect(
                    function(cm)
                        if d7 and cm.UserInputType == Enum.UserInputType.MouseMovement then
                            dd(cm)
                        end
                    end
                )
                cP.InputEnded:Connect(
                    function(cm)
                        if cm.UserInputType == Enum.UserInputType.MouseButton1 then
                            dg()
                        end
                    end
                )
                local function dh()
                    local ac, ad = nil, math.huge
                    for Q, R in pairs(b:GetPlayers()) do
                        if R ~= g and R.Character and R.Character:FindFirstChild("HumanoidRootPart") then
                            local di = g.Character or g.CharacterAdded:Wait()
                            local dj = di:WaitForChild("HumanoidRootPart")
                            local T = (R.Character.HumanoidRootPart.Position - dj.Position).Magnitude
                            if T <= cO and T < ad then
                                ac, ad = R, T
                            end
                        end
                    end
                    if ac then
                        local dk = ac.Character:FindFirstChild("Humanoid")
                        local di = g.Character or g.CharacterAdded:Wait()
                        local dl = di:FindFirstChild("Humanoid")
                        d1.Text = ac.Name
                        d5.Text = string.format("Distance %.1f", ad)
                        if dk then
                            d4.Text = tostring(math.floor(dk.Health))
                            d:Create(d3, TweenInfo.new(0.3), {Size = UDim2.new(dk.Health / dk.MaxHealth, 0, 1, 0)}):Play(

                            )
                        else
                            d4.Text = "N/A"
                            d3.Size = UDim2.new(0, 0, 1, 0)
                        end
                        if dl and dk then
                            local dm = dl.Health / dl.MaxHealth
                            local dn = dk.Health / dk.MaxHealth
                            if dm > dn then
                                d6.Text = "Winning"
                                d6.BackgroundColor3 = Color3.new(0, 0.7, 0)
                            elseif dm < dn then
                                d6.Text = "Losing"
                                d6.BackgroundColor3 = Color3.new(0.7, 0, 0)
                            else
                                d6.Text = "Even"
                                d6.BackgroundColor3 = Color3.new(0.7, 0.7, 0)
                            end
                        else
                            d6.Text = "N/A"
                            d6.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
                        end
                        d0.Visible = true
                    else
                        d0.Visible = false
                    end
                end
                e.RenderStepped:Connect(dh)
            else
                if g.PlayerGui:FindFirstChild("TargetHUD") then
                    g.PlayerGui.TargetHUD:Destroy()
                end
            end
        end
    }
)
E:AddToggle(
    {Name = "Hide guis", Callback = function(bc)
            if bc then
                game.Players.LocalPlayer.PlayerGui.MainGui["BRIDGE DUEL"].Visible = false
            else
                game.Players.LocalPlayer.PlayerGui.MainGui["BRIDGE DUEL"].Visible = true
            end
        end}
)
local dp = {Ambient = nil, OutdoorAmbient = nil, FogColor = nil, FogStart = nil, FogEnd = nil, PartColors = {}}
local dq, dr, ds = Color3.new(225, 160, 255), Color3.fromRGB(225, 160, 255), Vector3.new(2, 1, 3)
local dt = false
local function du(a8)
    local dv = game:GetService("Lighting")
    if a8 then
        dp.Ambient = dv.Ambient
        dp.OutdoorAmbient = dv.OutdoorAmbient
        dp.FogColor = dv.FogColor
        dp.FogStart = dv.FogStart
        dp.FogEnd = dv.FogEnd
        for Q, aJ in ipairs(workspace:GetDescendants()) do
            if aJ:IsA("BasePart") then
                dp.PartColors[aJ] = aJ.Color
            end
        end
        dv.Ambient = dq
        dv.OutdoorAmbient = dq
        dv.FogColor = dq
        dv.FogStart = dp.FogStart or 0
        dv.FogEnd = dp.FogEnd or 100
        for Q, aJ in ipairs(workspace:GetDescendants()) do
            if aJ:IsA("BasePart") then
                aJ.Color = dq
            end
        end
    else
        dv.Ambient = dp.Ambient
        dv.OutdoorAmbient = dp.OutdoorAmbient
        dv.FogColor = dp.FogColor
        dv.FogStart = dp.FogStart
        dv.FogEnd = dp.FogEnd
        for Q, aJ in ipairs(workspace:GetDescendants()) do
            if aJ:IsA("BasePart") and dp.PartColors[aJ] then
                aJ.Color = dp.PartColors[aJ]
            end
        end
    end
end
E:AddToggle(
    {Name = "Ambient", Callback = function(a8)
            du(a8)
        end}
)
local dw = {}
E:AddToggle(
    {Name = "Low gfx", Callback = function(bc)
            local workspace = game:GetService("Workspace")
            for Q, aJ in ipairs(workspace:GetDescendants()) do
                if aJ:IsA("BasePart") then
                    if bc then
                        dw[aJ] = aJ.Material
                        aJ.Material = Enum.Material.Ice
                    else
                        aJ.Material = dw[aJ] or aJ.Material
                        dw[aJ] = nil
                    end
                end
            end
        end}
)
E:AddToggle(
    {
        Name = "Water mark",
        Value = false,
        Callback = function(K)
            local b = game:GetService("Players")
            local d = game:GetService("TweenService")
            local e = game:GetService("RunService")
            local function dx(R)
                local dy = R:WaitForChild("PlayerGui")
                local dz = Instance.new("ScreenGui")
                dz.Name = "GameSenseWatermark"
                dz.ResetOnSpawn = false
                local cX = Instance.new("Frame")
                cX.Size = UDim2.new(0, 280, 0, 25)
                cX.Position = UDim2.new(0, -280, 0, 10)
                cX.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
                cX.BorderSizePixel = 0
                cX.Parent = dz
                local dA = Instance.new("UICorner")
                dA.CornerRadius = UDim.new(0, 4)
                dA.Parent = cX
                local dB = Instance.new("Frame")
                dB.Size = UDim2.new(1, 0, 0, 2)
                dB.Position = UDim2.new(0, 0, 0, 0)
                dB.BorderSizePixel = 0
                dB.Parent = cX
                local dC = Instance.new("UIGradient")
                dC.Color =
                    ColorSequence.new {
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(128, 0, 128))
                }
                dC.Parent = dB
                local dD = Instance.new("ImageLabel")
                dD.Size = UDim2.new(0, 60, 0, 60)
                dD.Position = UDim2.new(0, -15, 0.5, -30)
                dD.BackgroundTransparency = 1
                dD.Image = "rbxassetid://18335445948"
                dD.Parent = cX
                local dE = Instance.new("TextLabel")
                dE.Size = UDim2.new(1, -60, 1, 0)
                dE.Position = UDim2.new(0, 40, 0, 0)
                dE.BackgroundTransparency = 1
                dE.Font = Enum.Font.Code
                dE.TextColor3 = Color3.fromRGB(255, 255, 255)
                dE.TextSize = 16
                dE.Text = "8 ball | 00:00:00"
                dE.TextXAlignment = Enum.TextXAlignment.Left
                dE.Parent = cX
                dz.Parent = dy
                local bx = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                local by = d:Create(cX, bx, {Position = UDim2.new(0, 10, 0, 10)})
                by:Play()
                local bN = tick()
                local a9
                a9 =
                    e.Heartbeat:Connect(
                    function()
                        if dz.Parent == nil then
                            a9:Disconnect()
                            return
                        end
                        local dF = tick() - bN
                        local dG = math.floor(dF / 3600)
                        local dH = math.floor(dF % 3600 / 60)
                        local dI = math.floor(dF % 60)
                        dE.Text = string.format("8 ball | %02d:%02d:%02d", dG, dH, dI)
                    end
                )
            end
            local function dJ(R)
                local dy = R:FindFirstChild("PlayerGui")
                if dy then
                    local dz = dy:FindFirstChild("GameSenseWatermark")
                    if dz then
                        local cX = dz:FindFirstChildOfClass("Frame")
                        if cX then
                            local bx = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                            local by = d:Create(cX, bx, {Position = UDim2.new(0, -280, 0, 10)})
                            by:Play()
                            by.Completed:Connect(
                                function()
                                    dz:Destroy()
                                end
                            )
                        else
                            dz:Destroy()
                        end
                    end
                end
            end
            if K then
                for Q, R in ipairs(b:GetPlayers()) do
                    dx(R)
                end
                b.PlayerAdded:Connect(dx)
            else
                for Q, R in ipairs(b:GetPlayers()) do
                    dJ(R)
                end
                b.PlayerAdded:Connect(dJ)
            end
        end
    }
)
local function dK()
    local dL = game:GetService("Workspace").Camera:FindFirstChild("Viewmodel")
    if dL then
        local dM = dL:FindFirstChild("WoodenSword")
        if dM then
            local dN = dM:FindFirstChild("MainPart")
            if dN then
                return dN:FindFirstChild("Mesh")
            end
        end
    end
    return nil
end
E:AddToggle(
    {Name = "Custom sword", Callback = function(a8)
            dt = a8
            if not dt then
                local dO = dK()
                if dO then
                    dO.Offset = Vector3.new(0, 0, 0)
                end
            end
        end}
)
game:GetService("RunService").Heartbeat:Connect(
    function()
        if dt then
            local dO = dK()
            if dO then
                dO.Offset = ds
            end
        end
    end
)
local function dP()
    if dt then
        local dO = dK()
        if dO then
            dO.Offset = ds
        end
    end
end
E:AddSlider(
    {Name = "Sword front", Min = -10, Max = 10, Value = ds.X, Callback = function(K)
            ds = Vector3.new(K, ds.Y, ds.Z)
            dP()
        end}
)
E:AddSlider(
    {Name = "Sword vertical", Min = -10, Max = 10, Value = ds.Y, Callback = function(K)
            ds = Vector3.new(ds.X, K, ds.Z)
            dP()
        end}
)
E:AddSlider(
    {Name = "Sword side", Min = -10, Max = 10, Value = ds.Z, Callback = function(K)
            ds = Vector3.new(ds.X, ds.Y, K)
            dP()
        end}
)
E:AddSlider(
    {Name = "Fog Start", Min = 0, Max = 1000, Value = dp.FogStart or 0, Callback = function(K)
            dp.FogStart = K
            if dt then
                game:GetService("Lighting").FogStart = K
            end
        end}
)
E:AddSlider(
    {Name = "Fog End", Min = 0, Max = 1000, Value = dp.FogEnd or 100, Callback = function(K)
            dp.FogEnd = K
            if dt then
                game:GetService("Lighting").FogEnd = K
            end
        end}
)
E:AddColorpicker(
    {Name = "Atmo color", Value = dq, Callback = function(dQ, dR)
            dq = dQ
            if a8 then
                local dv = game:GetService("Lighting")
                dv.Ambient = dq
                dv.OutdoorAmbient = dq
                dv.FogColor = dq
                for Q, aJ in ipairs(workspace:GetDescendants()) do
                    if aJ:IsA("BasePart") then
                        aJ.Color = dq
                    end
                end
            end
        end}
)
local dS, dT = 1, false
getgenv().res = dS
E:AddToggle(
    {Name = "ress", Callback = function(bc)
            dT = bc
            if bc then
                while dT do
                    game:GetService("RunService").RenderStepped:Wait()
                    j.CFrame = j.CFrame * CFrame.new(0, 0, 0, 1, 0, 0, 0, getgenv().res, 0, 0, 0, 1)
                end
            end
        end}
)
E:AddSlider(
    {Name = "Resolution", Min = 0, Max = 1.2, Precise = 2, Value = dS, Callback = function(K)
            getgenv().res = K
        end}
)
local dU = 0.5
local dV = Color3.fromRGB(200, 150, 255)
local dW, dX, dY = false, false, false
local dZ
local function d_(e0)
    return Color3.new(e0.r, e0.g, e0.b)
end
local function e1(Y)
    local e2 = Instance.new("Highlight")
    e2.Name = Y.Name
    e2.FillColor = dV
    e2.DepthMode = "AlwaysOnTop"
    e2.FillTransparency = dU
    e2.OutlineTransparency = dU
    e2.Parent = dZ
    e2.Adornee = Y.Character
    Y.CharacterAdded:Connect(
        function(e3)
            e2.Adornee = e3
        end
    )
    Y:GetPropertyChangedSignal("Team"):Connect(
        function()
            e2.FillColor = d_(Y.TeamColor)
        end
    )
end
local function e4()
    for Q, R in ipairs(game.Players:GetPlayers()) do
        if R == game.Players.LocalPlayer then
            if dW then
                if not dZ:FindFirstChild(R.Name) then
                    e1(R)
                end
            else
                local e5 = dZ:FindFirstChild(R.Name)
                if e5 then
                    e5:Destroy()
                end
            end
        else
            if not dZ:FindFirstChild(R.Name) then
                e1(R)
            end
        end
    end
end
local function e6(e7)
    dY = e7
    if e7 then
        dZ = Instance.new("Folder", game:GetService("CoreGui"))
        dZ.Name = "Highlight_Storage"
        e4()
        coroutine.wrap(
            function()
                while dY do
                    task.wait(0.15)
                    e4()
                end
            end
        )()
    else
        if dZ then
            dZ:Destroy()
            dZ = nil
        end
    end
end
local function e8(e7)
    dW = e7
    e4()
end
local function e9(e7)
    dX = e7
    e4()
end
local function ea(dQ)
    dV = dQ
    if dZ then
        for Q, eb in ipairs(dZ:GetChildren()) do
            eb.FillColor = dQ
        end
    end
end
C:AddToggle({Name = "Chams", Value = false, Callback = e6})
C:AddColorpicker({Name = "Color", Value = dV, Callback = ea})
C:AddToggle({Name = "Self", Value = false, Callback = e8})
C:AddSlider(
    {Name = "Transparency", Min = 0, Max = 1, Value = dU, Callback = function(K)
            dU = K
            if dZ then
                for Q, eb in ipairs(dZ:GetChildren()) do
                    eb.FillTransparency = K
                    eb.OutlineTransparency = K
                end
            end
        end}
)
C:AddToggle(
    {
        Name = "Cape",
        Value = false,
        Callback = function(K)
            local R = game.Players.LocalPlayer
            local S = R.Character
            local function ec()
                local aX = S:WaitForChild("Humanoid")
                local ed =
                    aX.RigType == Enum.HumanoidRigType.R15 and S:WaitForChild("UpperTorso") or S:WaitForChild("Torso")
                local ee = Instance.new("Part", S)
                ee.Name = "Cape"
                ee.Anchored = false
                ee.CanCollide = false
                ee.TopSurface = Enum.SurfaceType.Smooth
                ee.BottomSurface = Enum.SurfaceType.Smooth
                ee.Size = Vector3.new(0.2, 0.2, 0.2)
                ee.Transparency = 0
                ee.BrickColor = BrickColor.new("Really black")
                local ef = Instance.new("BlockMesh", ee)
                ef.Scale = Vector3.new(9, 17.5, 0.08)
                local eg = Instance.new("Motor", ee)
                eg.Part0 = ee
                eg.Part1 = ed
                eg.MaxVelocity = 0.01
                eg.C0 = CFrame.new(0, 2, 0) * CFrame.Angles(0, math.rad(90), 0)
                eg.C1 = CFrame.new(0, 1, 0.45) * CFrame.Angles(0, math.rad(90), 0)
                spawn(
                    function()
                        local eh = false
                        while ee.Parent == S do
                            task.wait(1 / 60)
                            local bs = 0.1
                            local ei = ed.Velocity.Magnitude
                            if eh then
                                bs = bs + ed.Velocity.Magnitude / 10 * 0.05 + 0.05
                                eh = false
                            else
                                eh = true
                            end
                            bs = bs + math.min(ed.Velocity.Magnitude / 11, 0.5)
                            eg.MaxVelocity = math.min(ed.Velocity.Magnitude / 111, 0.04)
                            eg.DesiredAngle = -bs
                            if eg.CurrentAngle < -0.2 and eg.DesiredAngle > -0.2 then
                                eg.MaxVelocity = 0.04
                            end
                            repeat
                                task.wait()
                            until eg.CurrentAngle == eg.DesiredAngle or
                                math.abs(ed.Velocity.Magnitude - ei) >= ed.Velocity.Magnitude / 10 + 1
                            if ed.Velocity.Magnitude < 0.1 then
                                task.wait(0.1)
                            end
                        end
                    end
                )
            end
            local function ej()
                local ee = S:FindFirstChild("Cape")
                if ee then
                    ee:Destroy()
                end
            end
            if K then
                if not S:FindFirstChild("Cape") then
                    ec()
                end
            else
                ej()
            end
        end
    }
)
local ek = {
    {Name = "Mouse", Value = "Mouse"},
    {Name = "Bottom Center", Value = "BottomCenter"},
    {Name = "Top Center", Value = "TopCenter"},
    {Name = "Left Center", Value = "LeftCenter"},
    {Name = "Right Center", Value = "RightCenter"}
}
local el = 1
C:AddDropdown(
    {
        Name = "Tracer Source",
        Default = ek[el].Name,
        List = {ek[1].Name, ek[2].Name, ek[3].Name, ek[4].Name, ek[5].Name},
        Callback = function(K)
            for em, en in ipairs(ek) do
                if en.Name == K then
                    el = em
                    break
                end
            end
        end
    }
)
C:AddToggle(
    {
        Name = "Tracer",
        Value = false,
        Callback = function(a8)
            Tracer = a8
            local e = game:GetService("RunService")
            local b = game:GetService("Players")
            local eo = game:GetService("Workspace")
            local cP = game:GetService("UserInputService")
            local j = eo.CurrentCamera
            local ep = {
                DefaultSettings = false,
                TeamCheck = false,
                TracersVisible = true,
                TracerColor = Color3.fromRGB(128, 0, 128),
                TracerThickness = 1.8,
                TracerTransparency = 0.8
            }
            local eq = {}
            local function er(S)
                local es = Drawing.new("Line")
                es.Thickness = ep.TracerThickness
                es.Transparency = ep.TracerTransparency
                es.Visible = false
                es.Color = ep.TracerColor
                local function et()
                    if not S:IsDescendantOf(eo) or not S:FindFirstChild("HumanoidRootPart") then
                        es.Visible = false
                        return
                    end
                    local eu = S:FindFirstChild("Head") or S:FindFirstChild("HumanoidRootPart")
                    if not eu then
                        es.Visible = false
                        return
                    end
                    local ev = eu.Position
                    local ew, ex = j:WorldToViewportPoint(ev)
                    local ey = ek[el]
                    if ey.Value == "Mouse" then
                        es.From = Vector2.new(cP:GetMouseLocation().X, cP:GetMouseLocation().Y)
                    elseif ey.Value == "BottomCenter" then
                        es.From = Vector2.new(j.ViewportSize.X / 2, j.ViewportSize.Y)
                    elseif ey.Value == "TopCenter" then
                        es.From = Vector2.new(j.ViewportSize.X / 2, 0)
                    elseif ey.Value == "LeftCenter" then
                        es.From = Vector2.new(0, j.ViewportSize.Y / 2)
                    elseif ey.Value == "RightCenter" then
                        es.From = Vector2.new(j.ViewportSize.X, j.ViewportSize.Y / 2)
                    end
                    if ex then
                        es.To = Vector2.new(ew.X, ew.Y)
                        if ep.TeamCheck then
                            es.Visible = b.LocalPlayer.Team ~= S.Team
                        else
                            es.Visible = Tracer
                        end
                    else
                        es.Visible = false
                    end
                end
                eq[S] = es
                return es, et
            end
            local function ez(R, S)
                if R == b.LocalPlayer then
                    return
                end
                if not S or not S:IsDescendantOf(eo) or not S:FindFirstChild("HumanoidRootPart") then
                    return
                end
                local eA, eB = er(S)
                e.RenderStepped:Connect(
                    function()
                        eB()
                    end
                )
                S.AncestryChanged:Connect(
                    function()
                        if not S:IsDescendantOf(eo) then
                            eA.Visible = false
                            eq[S] = nil
                        end
                    end
                )
            end
            b.PlayerAdded:Connect(
                function(R)
                    R.CharacterAdded:Connect(
                        function(S)
                            ez(R, S)
                        end
                    )
                end
            )
            for Q, R in ipairs(b:GetPlayers()) do
                ez(R, R.Character)
            end
            cP.InputBegan:Connect(
                function(cm)
                    if cm.KeyCode == ep.ModeSkipKey and not cP:GetFocusedTextBox() then
                        el = el % #ek + 1
                        for Q, es in pairs(eq) do
                            es.Visible = ep.TracersVisible and Tracer
                        end
                    elseif cm.KeyCode == ep.DisableKey and not cP:GetFocusedTextBox() then
                        ep.TracersVisible = not ep.TracersVisible
                        for Q, es in pairs(eq) do
                            es.Visible = ep.TracersVisible and Tracer
                        end
                    end
                end
            )
            if ep.DefaultSettings then
                ep.TeamCheck = false
                ep.TracersVisible = true
                ep.TracerColor = Color3.fromRGB(128, 0, 128)
                ep.TracerThickness = 1.8
                ep.TracerTransparency = 0.8
            end
        end
    }
)
local R, eC = game.Players.LocalPlayer, false
local function eD(S)
    local eu = S:FindFirstChild("Head")
    if eu then
        local eE = eu:FindFirstChild("face")
        if eE then
            eE:Destroy()
        end
    end
end
local function eF(aJ)
    if aJ:IsA("Accessory") or aJ:IsA("Shirt") or aJ:IsA("Pants") or aJ.Name == "Face" then
        aJ:Destroy()
    elseif aJ:IsA("BasePart") then
        aJ.Material = Enum.Material.ForceField
        aJ.Color = Color3.fromRGB(225, 160, 255)
    end
end
local function eG(S)
    eD(S)
    for Q, aJ in ipairs(S:GetChildren()) do
        eF(aJ)
    end
    S.ChildAdded:Connect(eF)
end
local function eH(S)
    task.wait(0.14)
    if eC then
        eG(S)
    end
end
C:AddToggle(
    {Name = "Self visual", Value = false, Callback = function(bc)
            eC = bc
            if bc then
                eH(R.Character or R.CharacterAdded:Wait())
            end
        end}
)
R.CharacterAdded:Connect(eH)
